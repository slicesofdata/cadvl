[
  {
    "objectID": "modules/vectors_and_data_frame_basics.html",
    "href": "modules/vectors_and_data_frame_basics.html",
    "title": "Vectors and data frame basics",
    "section": "",
    "text": "In this module, we will address some basic building blocks of data frames in R. Having a basic understanding of objects, we can extend that to experience to some of the most important objects to understand when working with data, vectors and data frames. We will cover different examples of vector objects, their elements, and how they are organized into larger objects like data frames. Many functions we will use to clean and wrangle data will involve understanding and recognizing these two different object types so that you can apply a function correctly. For example, if a function accepts a vector in order to modify it, you cannot pass a data frame to it. You cannot try to brute force this approach and if you do, you will forever be frustrated. So, let’s jump deeper into some basic concepts.\nNote: By design, concepts in modules will often be redundant with concepts in other modules. If you understand the concepts, just read along or skip through the content. The redundancy, however, is built in purposefully to provide additional scaffolding to those who need it and because droves or literature on cognition and memory support the importance of repetition.\n\n\n\n\n{here} 1.0.1: for file path management\n\n\n\nRead through the module. You can use the R console or open up an R Markdown (e.g., .Rmd) file to follow along interactively. If you instead prefer to simply read through the content so that you can understand the concepts without coding, that is fine too. Concepts will be applied in class in order to complete activities, however. Reading the module will provide you with confidence working on those activities and prevent you from feeling lost while completing activities. Testing out some code may provide you more confidence.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#libraries",
    "href": "modules/vectors_and_data_frame_basics.html#libraries",
    "title": "Vectors and data frame basics",
    "section": "",
    "text": "{here} 1.0.1: for file path management\n\n\n\nRead through the module. You can use the R console or open up an R Markdown (e.g., .Rmd) file to follow along interactively. If you instead prefer to simply read through the content so that you can understand the concepts without coding, that is fine too. Concepts will be applied in class in order to complete activities, however. Reading the module will provide you with confidence working on those activities and prevent you from feeling lost while completing activities. Testing out some code may provide you more confidence.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#combining-elements-into-vectors-using-c",
    "href": "modules/vectors_and_data_frame_basics.html#combining-elements-into-vectors-using-c",
    "title": "Vectors and data frame basics",
    "section": "Combining elements into vectors using c()",
    "text": "Combining elements into vectors using c()\nOne way to create vectors is by using the combine function, c(). You can combine numeric and character elements into a vector. Let’s create some examples and assign names to them.\n\nNumeric vector:\n\nnumeric_vector &lt;- c(23, 22, 35)\n\nCall the object:\n\nnumeric_vector\n\n[1] 23 22 35\n\n\nNotice that the 3 returned elements of the vector are numbers.\n\n\nCharacter vector:\n\ncharacter_vector &lt;- c(\"Salle\", \"Jane\", \"Beavis\")\n\ncharacter_vector\n\n[1] \"Salle\"  \"Jane\"   \"Beavis\"\n\n\nNow, the 3 returned elements are enclosed by quotation marks, \". The quotes help you understand that the vector is character type.\n\n\nNumeric values as a character:\n\nquote_num_vector &lt;- c(\"23\", \"22\", \"35\")\n\nquote_num_vector\n\n[1] \"23\" \"22\" \"35\"\n\n\nAlthough the elements are numbers, they are in quotes, which indicates that the vector is character type.\n\n\nNumbers and characters:\n\nnum_char_vector &lt;- c(23, \"22\", \"35\")\n\nnum_char_vector\n\n[1] \"23\" \"22\" \"35\"\n\n\nAlthough one of the elements of the vector is numeric, the entire vector is returned as character. This is an important characteristic of vectors in R. They can be numeric or character but not both. If there is even one number enclosed by quotes, the vector is character as seen here.\n\nc(23, 22, 35, \"30\")\n\n[1] \"23\" \"22\" \"35\" \"30\"",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#creating-vectors-using-rnorm",
    "href": "modules/vectors_and_data_frame_basics.html#creating-vectors-using-rnorm",
    "title": "Vectors and data frame basics",
    "section": "Creating vectors using rnorm()",
    "text": "Creating vectors using rnorm()\nLet’s use rnorm() to create a numeric vector object that will represent sampling from a random normal distribution. The distribution will have a certain number of observations, n, a mean, mean, and a standard deviation, sd. We will need to pass arguments to create the data.\nParameters/Arguments:\n\nn: the number of elements in the vector\nmean: the mean of the elements\nsd: the standard deviation of the elements\n\nLet’s create a random normal distribution with a length of 1000 values. The mean should be 100 and standard deviation 15 (e.g., IQ distribution).\n\niq &lt;- rnorm(n = 1000, mean = 100, sd = 15)  \n\nRemember, as long as the order is correct, you do not have to specify the parameter names. You only need to specify the arguments for the parameters.\n\niq &lt;- rnorm(1000, 100, 15)      \n\nLook at the object’s head using head() in order to inspect the first 6 elements:\n\nhead(iq)                        \n\n[1] 111.26418  66.52353 114.97737  89.62418 106.52986  99.28497\n\n\nOr inspect the first 10 elements by setting n = 10.\n\nhead(iq, n = 10)\n\n [1] 111.26418  66.52353 114.97737  89.62418 106.52986  99.28497  89.99435\n [8] 102.69439 111.02830 107.47038",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#creating-number-sequences-using-seq",
    "href": "modules/vectors_and_data_frame_basics.html#creating-number-sequences-using-seq",
    "title": "Vectors and data frame basics",
    "section": "Creating number sequences using seq()",
    "text": "Creating number sequences using seq()\nYou can dig a little more deeply into the functionality of seq() by looking at the help documentation, help(seq) or ?seq.\nParameters/Arguments:\n\nfrom, to: the starting and (maximal) end values of the sequence. Of length 1 unless just from is supplied as an unnamed argument.\nby: number: increment of the sequence.\nlength.out: desired length of the sequence. A non-negative number, which for seq and seq.int will be rounded up if fractional.\nalong.with: take the length from the length of this argument.\n\n\nSequences from one value to another\nUse seq() to create a sequence FROM 1 TO 10:\n\nseq(from = 1, to = 10)       \n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nThe help documentation will inform you that the from and to parameters are in the first and second position, respectively. We can specify their arguments without using the parameter explicitly.\nReference only to:\n\nseq(1, to = 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nOr, remove both:\n\nseq(1, 10) \n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nThe returned result will be the same.\n\n\nSequences with increments using the by argument\nWe can also modify the from and to step through using the by function such that the numbers will increment by the value of by.\n\nseq(2, 10, by = 2)           # FROM 2 TO 10 BY 2s, dropping from and to arguments\n\n[1]  2  4  6  8 10\n\n\nUsing another example, create a sequence from 1 to 1000 and assign that to an object named id.\n\nid &lt;- seq(1, 1000)            # assign a sequence of 1 to 1000 to a vector named id\n\nInspecting the head:\n\nhead(id)\n\n[1] 1 2 3 4 5 6\n\n\n\n\nObtaining the number of elements using length()\nIf the number of elements in a vector variable changes, hard coding can be troublesome. We can return the length() of the sex vector and pass that as the sequence value. This approach is useful for objects that get modified. This approach would be more flexible.\n\nlength(sex)                # length will return the length of the vector, including NAs\n\n[1] 1000\n\n\nGreat, we get 1000!\n\n\nCreating a sequence using other functions\nThe argument for a function can also be another function. If we have the number of elements in a vector, we could also create a sequence from a starting number to the ending number as defined the another function.\nAssign a sequence of 1 to the length() of the sex object and assign that to an object named id. To make the code more easy to read, we will place the parameters on separate lines.\n\nid &lt;- seq(from = 1, \n          to = length(sex)\n          )  \n\nAnd look at the head:\n\nhead(id)\n\n[1] 1 2 3 4 5 6",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#converting-numeric-or-characters-containing-numbers-to-integer",
    "href": "modules/vectors_and_data_frame_basics.html#converting-numeric-or-characters-containing-numbers-to-integer",
    "title": "Vectors and data frame basics",
    "section": "Converting numeric or characters containing numbers to integer",
    "text": "Converting numeric or characters containing numbers to integer\nConvert to integer:\n\niq &lt;- as.integer(iq)\n\nNow they are integers:\n\nhead(iq)\n\n[1] 111  66 114  89 106  99",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#converting-numeric-vectors-to-character",
    "href": "modules/vectors_and_data_frame_basics.html#converting-numeric-vectors-to-character",
    "title": "Vectors and data frame basics",
    "section": "Converting numeric vectors to character",
    "text": "Converting numeric vectors to character\nIf the characters are numbers, pass an existing vector into as.character() to convert\n\niq &lt;- as.character(iq)                # make is a character vector  \n\nNow the numbers are in quotes representing strings.\n\nhead(iq)               \n\n[1] \"111\" \"66\"  \"114\" \"89\"  \"106\" \"99\"",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#converting-character-vectors-to-numeric",
    "href": "modules/vectors_and_data_frame_basics.html#converting-character-vectors-to-numeric",
    "title": "Vectors and data frame basics",
    "section": "Converting character vectors to numeric",
    "text": "Converting character vectors to numeric\nIf the elements are characters, pass an existing vector into as.integer() to convert.\n\niq &lt;- as.integer(iq)  \n\nNow elements are integers, not floats.\n\nhead(iq)\n\n[1] 111  66 114  89 106  99\n\n\nYou can also wrap a function in another function when the initial object is created. Here, as.integer() converts the vector returned by rnorm() into an integer.\n\niq &lt;- as.integer(rnorm(1000, 100, 15))                 # create initially by wrapping as.integer() around rnorm()",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#using-piping-operators-and",
    "href": "modules/vectors_and_data_frame_basics.html#using-piping-operators-and",
    "title": "Vectors and data frame basics",
    "section": "Using piping operators |> and %>%",
    "text": "Using piping operators |&gt; and %&gt;%\nAlternatively, if nesting functions and reading them from the inside out confuses you, you can instead use piping operators to pass objects from function to function. Piping also improves code readability.\nBase R now includes it’s own piping operator, |&gt;. In the past, piping was accomplish using {magrittr} piping operators and sometimes those operators work better than the base R pipe. The main piping operator from {magrittr} is %&gt;%. To use it, we will need to load the library first using library(), though you should loads all libraries at the top of your file. We will use both piping operators to illustrate differences in functionality. I may use them interchangeably in materials.\nLoad the library:\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\n\nCreate the iq vector:\n\niq &lt;- rnorm(1000, 100, 15)        # create the random normal dist\n\nCheck whether the vector is an integer:\n\nis.integer(iq)\n\n[1] FALSE\n\n\nis.integer() is a logical test, so it will return either TRUE or FALSE. You see that the vector is not an integer as FALSE was returned. Because IQ scores are integers, let’s use the process to make it an integer.\n\niq &lt;- rnorm(1000, 100, 15) %&gt;%    # create the random normal dist\n    as.integer()                  # pipe to make integer\n\nUsing base R’s piping operator:\n\niq &lt;- rnorm(1000, 100, 15) |&gt;     # create the random normal dist\n    as.integer()                  # pipe to make integer",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#examine-the-head-of-the-object",
    "href": "modules/vectors_and_data_frame_basics.html#examine-the-head-of-the-object",
    "title": "Vectors and data frame basics",
    "section": "Examine the head() of the object",
    "text": "Examine the head() of the object\nHowever you create the vector, we can examine the head of the vector using head():\n\nhead(iq)\n\n[1]  97 103 111  99  87  99\n\n\nA note about pipes: If you did not pipe the object from one function to another, you would need to wrap the functions as layers. The the function in the inner layer would be executed first and the function of the outer layer would be executed last.\nas.integer(rnorm(1000, 100, 15))\nAlthough there is nothing incorrect with this code, readability is compromised because you have to read the functions from the inside out. Piping objects to functions allows for reading functions from top to bottom.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#plotting-the-vector-using-hist",
    "href": "modules/vectors_and_data_frame_basics.html#plotting-the-vector-using-hist",
    "title": "Vectors and data frame basics",
    "section": "Plotting the vector using hist()",
    "text": "Plotting the vector using hist()\nAnd to see a plot, use hist(iq):\n\nhist(iq)\n\n\n\n\n\n\n\n\nOr pass the object using a pipe (e.g., |&gt; or %&gt;%) and pipe the vector to the histogram function in base R:\n\niq %&gt;% hist()\n\n\n\n\n\n\n\n\n\niq |&gt; hist()\n\n\n\n\n\n\n\n\nNotice that this approach changes the title. When piping objects with {magrittr}’s pipe, the object is referenced using . so this because the name of the object.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#adding-a-title-to-the-plot",
    "href": "modules/vectors_and_data_frame_basics.html#adding-a-title-to-the-plot",
    "title": "Vectors and data frame basics",
    "section": "Adding a title to the plot",
    "text": "Adding a title to the plot\nTO add a title, pass a string argument to main:\n\niq |&gt; hist(main = \"IQ Distribution\")",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/vectors_and_data_frame_basics.html#recoding-vectors",
    "href": "modules/vectors_and_data_frame_basics.html#recoding-vectors",
    "title": "Vectors and data frame basics",
    "section": "Recoding vectors",
    "text": "Recoding vectors\nSometimes elements of vectors are messy and need to be fixed. In general, this process is referred to as recoding. There are various ways to recode in R and there are special libraries dedicated to recoding. Now, we will perform some simple recoding.\nYou can use ifelse() or dplyr::case_when() to test whether the elements of a vector match some condition and if yes (do one thing), otherwise no (do something else). In order to understand how these functions and many others work we need to understand a logical test.\n\nifelse()\ndplyr::case_when()\n\n\nPerforming a logical test\nWe can perform a logical test on all types of objects but this example will focus on vectors, for which all elements will be examined. The logical test will return TRUE or FALSE for each vector element depending on whether the case matches a test condition.\nRather than illustrate this the 1000 element sex vector, we will create a vector of length 5 called temp_sex. In this example, you will also see what happens when you need to clean up and recode the sloppy data. You can see are composed of both upper and lower case letters presumably corresponding to biological sex. Because R is a case-sensitive language, \"M\" and \"m\" represent different objects even though the intent is for them to be the same.\n\ntemp_sex &lt;- c(\"M\", \"m\", \"F\", \"f\", NA)\n\nYou can see that some character elements in the vector are upper- and lowercase m’s and f’s. Let’s see what happens when we perform a logical test of the vector. Remember that by itself = will be assignment (like &lt;-). In order to determine whether an object or elements of an object is equal to something, we use ==.\nFor example, temp_sex == \"M\":\n\ntemp_sex == \"M\"\n\n[1]  TRUE FALSE FALSE FALSE    NA\n\n\nThe returned vector is of the same length as the vector tested. Each element of the vector was tested and those elements that matched the character \"M\" returns TRUE. The other elements are FALSE, except of the NA, or missing value. Importantly, the logical test does not return FALSE for NAs.\n\n\nRecoding using ifelse()\nLet’s perform the logical test inside ifelse(). The function will test each element and IF it is TRUE (matches the condition) will assign 0, else/otherwise assign 1 in order to recode the letters into numbers. Of course, you may often wish to recode letters into other letters.\n\nifelse(temp_sex == \"M\", 0, 1)\n\n[1]  0  1  1  1 NA\n\n\nWe can see that all of the TRUEs are 0 and all else except for NA are 0. You can see that only the \"M\" was recoded to 0 and all other elements that were not NA were recoded as 1. Clearly, this is not correct. We can use multiple ifelse() functions but the solution won’t be offered here because it’s just really messy. Instead of focusing on bad code, let’s just focus on offering better solutions.\nPerforming the same test on sex but piping the vector to head() will allow for inspection of the first few elements.\n\nifelse(sex == \"M\", 0, 1) |&gt;\n  head()\n\n[1] 1 1 1 1 1 1\n\n\nThe ifelse() approach is fine for two groups. When there are more than two groups, however, re-coding can be confusing with ifelse() because you’ll need to nest an ifelse() inside an ifelse(). The popular {dplyr} library also has a couple functions similar to ifelse(), for example, if_else() and case_when().\n\n\nRecoding using dplyr::case_when()\nThe case_when() function will also perform logical tests but you can easily specify more than one. The help documentation tells us that “This function allows you to vectorise multiple if_else() statements. Each case is evaluated sequentially and the first match for each element determines the corresponding value in the output vector. If no cases match, the .default is used as a final”else” statement.” And later “If none of the cases match and no .default is supplied, NA is used.\nWith case_when(), we will perform a logical test of the elements against the character string \"M\" first. The elements that match \"M\" will evaluate as TRUE and will be recoded as 0. Then the elements of the new recoded vector will be tested again against \"F\". Those that are TRUE will be recoded as 1. Anything else will be assigned NA for missing because they matched neither \"M\" nor \"F\".\nWe wee that only the first element returns TRUE. Other elements are FALSE or NA.\n\ndplyr::case_when(\n  temp_sex == \"M\" ~ 0,\n  temp_sex == \"F\" ~ 1\n  ) \n\n[1]  0 NA  1 NA NA\n\n\nBut note that if the character case is inconsistent, NA’s will replace elements that are \"m\" and \"f\". An easy fix for casing is to convert the vector (without assignment) by passing it to tolower() or toupper() and then perform the logical conversion on the case change elements.\n\ndplyr::case_when(\n  toupper(temp_sex) == \"M\" ~ 0,\n  toupper(temp_sex) == \"F\" ~ 1\n  ) \n\n[1]  0  0  1  1 NA\n\n\nYou can now see that all elements will evaluate to TRUE and are recoded except for the NA in the vector. Keep in mind that strings may be very messy and require careful inspection and cleaning. Sometimes simple case recoding solves your problems.\nNote: There is a much powerful library called {stringr} for wrangling strings. We will use this library to perform other tasks. If you wanted to familiarize yourself with making strings upper or lowercase using that library, use stringr::str_to_lower() and stringr::str_to_upper().\nTo illustrate:\n\nlibrary(stringr)            # load the library first\n\ndplyr::case_when(\n  str_to_upper(temp_sex) == \"M\" ~ 0,\n  str_to_upper(temp_sex) == \"F\" ~ 1\n  ) \n\n[1]  0  0  1  1 NA\n\n\nWhen you have more logical tests to perform, you can specify them on a new line. Using the existing vector, we can illustrate with a silly example.\n\ndplyr::case_when(\n  temp_sex == \"m\" ~ \"Young Men\",\n  temp_sex == \"M\" ~ \"Old Men\",\n  temp_sex == \"f\" ~ \"Young Women\",\n  temp_sex == \"F\" ~ \"Old Women\",\n  ) \n\n[1] \"Old Men\"     \"Young Men\"   \"Old Women\"   \"Young Women\" NA           \n\n\nWe have not recoded the vector to have clear names for 4 groups, plus and NAs. Of course, you have not changed temp_sex unless you assign the returned vector to a name.\n\ntemp_sex\n\n[1] \"M\" \"m\" \"F\" \"f\" NA \n\n\nAssign to temp_sex to overwrite:\n\ntemp_sex &lt;- dplyr::case_when(\n  temp_sex == \"m\" ~ \"Young Men\",\n  temp_sex == \"M\" ~ \"Old Men\",\n  temp_sex == \"f\" ~ \"Young Women\",\n  temp_sex == \"F\" ~ \"Old Women\",\n  ) \n\n\ntemp_sex\n\n[1] \"Old Men\"     \"Young Men\"   \"Old Women\"   \"Young Women\" NA",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Vectors and data frame basics**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html",
    "href": "modules/reading_data_files.html",
    "title": "Reading data files",
    "section": "",
    "text": "In this module, you will learn how to read and write data files in different formats. Depending how you access data, the process may change so this topic is discussed in a general way with different approaches described. If you find yourself in a bind with reading data, one of these approaches will likely work. In many instances, however, readr::read_csv() will be your friend when reading files and readr::write_csv() will be for writing files.\nIn addition, concepts related to reading files and managing workflow are discussed. By doing so, my goal is to make you aware of some key issues that could cause some problems with data science projects. When reading files,\n\n\n\nR Workflow Basics\nGeneral Wrangling: Sections 5.1 up through 5.5\n\n\n\n\n\nCreate a GitHub account if you don’t have one (this may come in handy for projects and a blog if you want)\n\n\n\n\n\n{openxlsx} 4.2.5.2: for reading Excel spreadsheets from a URL\n{readxl} 1.4.3: for reading Excel spreadsheets\n{readr} 2.1.5: for reading .csv, .tsv, and .fwf files\n\nFirst, we need an .xlsx data file. You can obtain one locally or online from a URL.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#optional-readings",
    "href": "modules/reading_data_files.html#optional-readings",
    "title": "Reading data files",
    "section": "",
    "text": "R Workflow Basics\nGeneral Wrangling: Sections 5.1 up through 5.5",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#task",
    "href": "modules/reading_data_files.html#task",
    "title": "Reading data files",
    "section": "",
    "text": "Create a GitHub account if you don’t have one (this may come in handy for projects and a blog if you want)",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#libraries",
    "href": "modules/reading_data_files.html#libraries",
    "title": "Reading data files",
    "section": "",
    "text": "{openxlsx} 4.2.5.2: for reading Excel spreadsheets from a URL\n{readxl} 1.4.3: for reading Excel spreadsheets\n{readr} 2.1.5: for reading .csv, .tsv, and .fwf files\n\nFirst, we need an .xlsx data file. You can obtain one locally or online from a URL.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#excel-files-from-a-url",
    "href": "modules/reading_data_files.html#excel-files-from-a-url",
    "title": "Reading data files",
    "section": "Excel files from a URL",
    "text": "Excel files from a URL\n{readxl} 1.4.3 lacks the ability to read the file from online. We can, however, read it using {openxlsx}. The problem is that you will only be able to read a the first sheet. If the first sheet is all you need, this can work. Pass the URL to openxlsx::read.xlsx() and assign it’s contents to an object named DAT using the assignment operator &lt;-.\n\nURL &lt;- \"https://github.com/slicesofdata/cdavl/raw/main/data/swim/cms-top-all-time-2023-swim.xlsx\"\n\nDAT &lt;- openxlsx::read.xlsx(URL, sheet = 1)\n\nWhat does the head of the data file look like?\n\nhead(DAT)\n\n   score              name year          event   team\n1 525.35       Maia Presti 2015 1-Meter Diving Athena\n2 514.70 Makenna Parkinson 2023 1-Meter Diving Athena\n3 512.05      Emma Ng Pack 2023 1-Meter Diving Athena\n4 494.95         Izzy Doud 2023 1-Meter Diving Athena\n5 462.15     Carli Lessard 2015 1-Meter Diving Athena\n6 447.70     Alexis Romero 2023 1-Meter Diving Athena\n\n\nJust an FYI, when you want a different worksheet you will need to pass a sheet name to the sheet argument. In this case, we saved it as part of the download process. Let’s pass sheet = \"swim\".\n\nhead(\n  openxlsx::read.xlsx(URL, sheet = \"swim\")\n)\n\n   time             name year   event   team\n1 23.29 Jocelyn Crawford 2019 50 FREE Athena\n2 23.31    Ava Sealander 2022 50 FREE Athena\n3 23.49        Kelly Ngo 2016 50 FREE Athena\n4 23.71        Helen Liu 2014 50 FREE Athena\n5 23.76      Michele Kee 2014 50 FREE Athena\n6 23.77 Natalia Orbach-M 2020 50 FREE Athena",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#reading-excel-spreadsheets-with-readxl",
    "href": "modules/reading_data_files.html#reading-excel-spreadsheets-with-readxl",
    "title": "Reading data files",
    "section": "Reading Excel Spreadsheets with {readxl}",
    "text": "Reading Excel Spreadsheets with {readxl}\nWe will use the {readxl} library to handing reading of Excel files. Because Excel files can contain multiple sheets, one goal would be to find out the sheet names using readxl::excel_sheets (see ?readxl::excel_sheets). This function takes one argument, which is the path to the file. Passing the path will return the sheet names in that file. We can pass the path string directly into the function or if the file path is already saved as a object, pass that.\nIn order to read an Excel spreadsheet file, you will need to specify at very least file and if you want to read a specific sheet other than the first one, then you will need to specify sheet.\n\nfile: a path to the file, including the file name\nsheet: the sheet name to read\n\n\nGetting Sheet Names\nFirst, let’s assign the file path to an object because we will use this path a few times and we don’t want to keep typing it lest we make an error.\n\nfile_name &lt;- \"cms-top-all-time-2023-swim.xlsx\"\n\nWe can examine the worksheet names:\n\nreadxl::excel_sheets(path = here::here(\"data\", file_name))\n\n[1] \"diving\" \"swim\"   \"relay\" \n\n\nGreat, we know know the sheet names. The benefit of passing an object is that you you may wish to pass the path to another function, for example, to read a sheet from the file.\n\n\nReading a Sheet\nIn order to read a sheet, we will use readxl::read_excel(), which takes the file path as the first argument and the name of the desired sheet as the second argument. You might get away with passing only the path as long as your goal is to read the first sheet because this is the default action. Let’s wrap the function in head() to see the top.\n\nhead(\n  readxl::read_excel(here::here(\"data\", file_name))\n)\n\n# A tibble: 6 × 5\n  score  name              year  event          team  \n  &lt;chr&gt;  &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt; \n1 525.35 Maia Presti       2015  1-Meter Diving Athena\n2 514.70 Makenna Parkinson 2023  1-Meter Diving Athena\n3 512.05 Emma Ng Pack      2023  1-Meter Diving Athena\n4 494.95 Izzy Doud         2023  1-Meter Diving Athena\n5 462.15 Carli Lessard     2015  1-Meter Diving Athena\n6 447.70 Alexis Romero     2023  1-Meter Diving Athena\n\n\nThe function also turns the file content into special object type knows as a data frame. A data frame is composed of row and column data. Sometimes data frames are messy but luckily we have a fairly clean file. You can verify using R’s built-in function is.data.frame(), which will return TRUE if it’s a data frame or FALSE if not. We will assign this to an object\n\nis.data.frame(readxl::read_excel(here::here(\"data\", file_name)))\n\n[1] TRUE\n\n\nBut we don’t want the first sheet. Pass sheet = \"swim\" to read that sheet. Also, let’s read in the data and assign it to an object called DAT which will hold the data frame.\n\nDAT &lt;- readxl::read_excel(here::here(\"data\", file_name), sheet = \"swim\")\n\nViewing the head of the data frame, we can see that it is composed of 5 column vectors representing variables with names: time, name, year, event, team.\n\nhead(DAT)\n\n# A tibble: 6 × 5\n  time  name             year  event   team  \n  &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n2 23.31 Ava Sealander    2022  50 FREE Athena\n3 23.49 Kelly Ngo        2016  50 FREE Athena\n4 23.71 Helen Liu        2014  50 FREE Athena\n5 23.76 Michele Kee      2014  50 FREE Athena\n6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n\n\nOK, that was fun. In order to demonstrate reading local .csv files, we will take a detour into saving files.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#managing-file-paths-with-here",
    "href": "modules/reading_data_files.html#managing-file-paths-with-here",
    "title": "Reading data files",
    "section": "Managing file paths with {here}",
    "text": "Managing file paths with {here}\nWhen downloading the file, you may have noticed using the {here} library. A discussion of the library was delayed at the time. We will now look a little deeper into how the library simplifies working with file paths within the context of the {readr}.\nWhat’s the best way to handle directories and file paths? Undoutedly, that is the {here} library, assuming of course you are smart enough to be using projects in RStudio. When you open a file from within a project, {here} will make the project directory the working directory. And if you are organized, your data files will be in a /data directory inside the project directory. When passing \"data\" as the first argument to here::here() ( e.g., here::here(\"data\"), you will see that the function returns a string containing the full path to the project directory plus the data subdirectory.\n\nhere::here(\"data\")\n\n[1] \"C:/Users/gcook/Sync/git/cdavl/data\"",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#a-workflow-side-note-on-strings",
    "href": "modules/reading_data_files.html#a-workflow-side-note-on-strings",
    "title": "Reading data files",
    "section": "A Workflow Side Note on Strings",
    "text": "A Workflow Side Note on Strings\nYou could avoid hard coding the change of the file extension in order to streamline you workflow. Every time to pass the path and the path changes you will need to change this by hand and doing so could be extremely annoying. For example, if you change the save location or the file name, you’ll need to make updates for all code referencing the path. To avoid potential headaches, we can instead use gsub() to examine a string, look for a pattern, and replace that pattern with another pattern. All we want to do is to change \".xlsx\" or \".xls\" in the string to \".csv\". And because we will next want to use this new name for reading later, let’s assign the change to a new string object, file_csv.\nFirst, let’s see what gsub() is doing.\n\ngsub(pattern = \".xlsx|.xls\",  \n     replacement = \".csv\", \n     x = file_name\n     )\n\n[1] \"cms-top-all-time-2023-swim.csv\"\n\n\nAssign to an object:\n\nfile_csv &lt;- gsub(\".xlsx|.xls\", \".csv\", file_name)\n\nNote: Code was simplified because the arguments were passed in the order expected by the gsub() function.\nSecond, pass the path object to write_csv():\n\nreadr::write_csv(x = DAT, \n                 file = here::here(\"data\", file_csv)\n                 )\n\nDid it save? Use file.exists().\n\nfile.exists(here::here(\"data\", file_csv))\n\n[1] TRUE\n\n\nRemember, all we have done is save the data frame. This new file will contain only the data from the spreadsheet that we read earlier. Before opening this new file, we need to take a detour on general handling of reading files with {readr}.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#reading-a-.csv-file-stored-on-a-website",
    "href": "modules/reading_data_files.html#reading-a-.csv-file-stored-on-a-website",
    "title": "Reading data files",
    "section": "Reading a .csv File Stored on a Website",
    "text": "Reading a .csv File Stored on a Website\nFor example, although the mtcars data is also a built-in data set in R, if it were a read actual .csv file save on some website, you can pass the URL path as the file. This file does exist on the {tidyverse} github for {readr}.\n\nreadr::read_csv(file = \"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nBecause file if the first argument of the function, you do not need to reference it specifically. Doing so just eliminates ambiguity for more complicated function calls. You will come across a lot of examples of code that do NOT reference the arguments by name.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nBy default, readr::read_csv() tries to guess whether column/variable names are present. If you know they exist, you can set col_names = TRUE.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = T)\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nIf the names are present and you set col_names = FALSE, you will get a mess because {readr} will assume the header row is data just as the rest of the file.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = F)\n\nRows: 33 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 33 × 11\n   X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11  \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 mpg   cyl   disp  hp    drat  wt    qsec  vs    am    gear  carb \n 2 21    6     160   110   3.9   2.62  16.46 0     1     4     4    \n 3 21    6     160   110   3.9   2.875 17.02 0     1     4     4    \n 4 22.8  4     108   93    3.85  2.32  18.61 1     1     4     1    \n 5 21.4  6     258   110   3.08  3.215 19.44 1     0     3     1    \n 6 18.7  8     360   175   3.15  3.44  17.02 0     0     3     2    \n 7 18.1  6     225   105   2.76  3.46  20.22 1     0     3     1    \n 8 14.3  8     360   245   3.21  3.57  15.84 0     0     3     4    \n 9 24.4  4     146.7 62    3.69  3.19  20    1     0     4     2    \n10 22.8  4     140.8 95    3.92  3.15  22.9  1     0     4     2    \n# ℹ 23 more rows\n\n\nAs you can see, the column names are all prefixed with “X” and the first row is now the name of the headers. names() or colnames() will return the column names, so we can apply it and see what happens. We will wrap readr::read_csv() in names(). See how this is a problem. You can use colnames() to test this too.\n\nnames(\n  readr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = T)\n  )\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#reading-a-.csv-file-stored-locally-on-your-computer",
    "href": "modules/reading_data_files.html#reading-a-.csv-file-stored-locally-on-your-computer",
    "title": "Reading data files",
    "section": "Reading a .csv File Stored Locally on your Computer",
    "text": "Reading a .csv File Stored Locally on your Computer\nIf a file actually existed on your computer, the file would not be a URL but rather the path location to where the file is stored.\nAnd now we can read the locale file as before except we are not passing the string name but rather an object (e.g., file_csv) holding the file path and file name. Voilà.\n\nreadr::read_csv(here::here(\"data\", file_csv))\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): time, name, year, event, team\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 440 × 5\n   time  name             year  event   team  \n   &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n 2 23.31 Ava Sealander    2022  50 FREE Athena\n 3 23.49 Kelly Ngo        2016  50 FREE Athena\n 4 23.71 Helen Liu        2014  50 FREE Athena\n 5 23.76 Michele Kee      2014  50 FREE Athena\n 6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n 7 23.77 Suzia Starzyk    2020  50 FREE Athena\n 8 23.87 Katie Bilotti    2010  50 FREE Athena\n 9 23.93 Jenni Rinker     2011  50 FREE Athena\n10 24.02 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#reading-raw-data-that-is-comma-separated-e.g.-.csv",
    "href": "modules/reading_data_files.html#reading-raw-data-that-is-comma-separated-e.g.-.csv",
    "title": "Reading data files",
    "section": "Reading Raw Data that is Comma-Separated (e.g., .csv)",
    "text": "Reading Raw Data that is Comma-Separated (e.g., .csv)\nWe will file use readr::read_csv() to read our data file (viz., cms-top-all-time-2023-swim.csv).\n\nreadr::read_csv(here::here(\"data\", file_csv))\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): time, name, year, event, team\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 440 × 5\n   time  name             year  event   team  \n   &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n 2 23.31 Ava Sealander    2022  50 FREE Athena\n 3 23.49 Kelly Ngo        2016  50 FREE Athena\n 4 23.71 Helen Liu        2014  50 FREE Athena\n 5 23.76 Michele Kee      2014  50 FREE Athena\n 6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n 7 23.77 Suzia Starzyk    2020  50 FREE Athena\n 8 23.87 Katie Bilotti    2010  50 FREE Athena\n 9 23.93 Jenni Rinker     2011  50 FREE Athena\n10 24.02 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows\n\n\nIf there were only data in the file and no names representing variables on the first row, the file might look like that below. We can imitate this by skipping the first row (containing names) using skip =.\n\nreadr::read_csv(here::here(\"data\", file_csv), skip = 1)\n\nRows: 439 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): 23.29, Jocelyn Crawford, 2019, 50 FREE, Athena\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 439 × 5\n   `23.29` `Jocelyn Crawford` `2019` `50 FREE` Athena\n   &lt;chr&gt;   &lt;chr&gt;              &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; \n 1 23.31   Ava Sealander      2022   50 FREE   Athena\n 2 23.49   Kelly Ngo          2016   50 FREE   Athena\n 3 23.71   Helen Liu          2014   50 FREE   Athena\n 4 23.76   Michele Kee        2014   50 FREE   Athena\n 5 23.77   Natalia Orbach-M   2020   50 FREE   Athena\n 6 23.77   Suzia Starzyk      2020   50 FREE   Athena\n 7 23.87   Katie Bilotti      2010   50 FREE   Athena\n 8 23.93   Jenni Rinker       2011   50 FREE   Athena\n 9 24.02   Annika Sharma      2023   50 FREE   Athena\n10 51.05   Kelly Ngo          2016   100 FREE  Athena\n# ℹ 429 more rows\n\n\nSee how the first row is assumed to be names? Setting col_names = F will fix the problem. Putting the arguments on separate rows of R code might improve code legibility.\n\nreadr::read_csv(here::here(\"data\", file_csv), \n                skip = 1,\n                col_names = F\n                )\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): X1, X2, X3, X4, X5\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 440 × 5\n   X1    X2               X3    X4      X5    \n   &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n 2 23.31 Ava Sealander    2022  50 FREE Athena\n 3 23.49 Kelly Ngo        2016  50 FREE Athena\n 4 23.71 Helen Liu        2014  50 FREE Athena\n 5 23.76 Michele Kee      2014  50 FREE Athena\n 6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n 7 23.77 Suzia Starzyk    2020  50 FREE Athena\n 8 23.87 Katie Bilotti    2010  50 FREE Athena\n 9 23.93 Jenni Rinker     2011  50 FREE Athena\n10 24.02 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows\n\n\nBut we have no column names now. Setting col_names = will fix that. Use c() to combine 4 names, e.g., col_names = c(\"name1\", \"name2\", \"name3\", \"name4\").\n\nreadr::read_csv(here::here(\"data\", file_csv), \n                skip = 1,\n                col_names = c(\"time\", \"name\", \"year\", \"event\")\n                )\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): time, name, year, event, X5\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 440 × 5\n   time  name             year  event   X5    \n   &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n 2 23.31 Ava Sealander    2022  50 FREE Athena\n 3 23.49 Kelly Ngo        2016  50 FREE Athena\n 4 23.71 Helen Liu        2014  50 FREE Athena\n 5 23.76 Michele Kee      2014  50 FREE Athena\n 6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n 7 23.77 Suzia Starzyk    2020  50 FREE Athena\n 8 23.87 Katie Bilotti    2010  50 FREE Athena\n 9 23.93 Jenni Rinker     2011  50 FREE Athena\n10 24.02 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows\n\n\nIf you have column names that are on row 1 of the data frame, don’t skip that row and instead set col_names = TRUE to put them in place.\n\nreadr::read_csv(here::here(\"data\", file_csv), \n                col_names = T\n                )\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): time, name, year, event, team\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 440 × 5\n   time  name             year  event   team  \n   &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n 2 23.31 Ava Sealander    2022  50 FREE Athena\n 3 23.49 Kelly Ngo        2016  50 FREE Athena\n 4 23.71 Helen Liu        2014  50 FREE Athena\n 5 23.76 Michele Kee      2014  50 FREE Athena\n 6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n 7 23.77 Suzia Starzyk    2020  50 FREE Athena\n 8 23.87 Katie Bilotti    2010  50 FREE Athena\n 9 23.93 Jenni Rinker     2011  50 FREE Athena\n10 24.02 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows\n\n\nLuckily, we have both names and data in the file and by default readr::read_csv() does what we intend.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#reading-data-from-a-librarypackage",
    "href": "modules/reading_data_files.html#reading-data-from-a-librarypackage",
    "title": "Reading data files",
    "section": "Reading Data from a Library/Package",
    "text": "Reading Data from a Library/Package\nAs mentioned earlier, mtcars is a data set on cars which is also part of base R, meaning you do not need to read it from anyplace. R does this automatically.\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n# or \nprint(mtcars)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nUse names() to read the column names:\n\nnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#object-assignment-using--",
    "href": "modules/reading_data_files.html#object-assignment-using--",
    "title": "Reading data files",
    "section": "Object Assignment using <-",
    "text": "Object Assignment using &lt;-\nYou will want to take the data frame object that is returned by the read.csv() function and assign it to an object of some name using the assignment operator &lt;- . Although the concept of assignment will be covered later, for now just understand that we need to make the data more accessible to work with. You could name the object anything you want. Let’s assign it to DAT standing for data frame and let’s make it ALL CAPS.\nA note about case: R is a case-sensitive language so object names like DAT, dat, DaT, etc. are possible and can refer to different objects depending on how you assign them. We will use capital letters only because I like to flag objects that are data frame as special and this approach makes them visually identifiable. You could choose your own convention for naming data frames, other objects, variables in data frames, etc. but I don’t recommend being random about it.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#using-read.table",
    "href": "modules/reading_data_files.html#using-read.table",
    "title": "Reading data files",
    "section": "Using read.table():",
    "text": "Using read.table():\nread.table() is a flexible function for reading files because you can specify how the data are separated in rows by setting the sep argument. A common separation is a comma but you might also have tabs or other special characters.\n\nDAT &lt;- read.table(file = here::here(\"data\", file_csv),\n                  sep = \",\",\n                  header = T\n                  )\n\nread.csv() is a specific case of read.table() that sets sep = \",\" for you so there is no need to pass the argument. read.csv() is the more common function you will come across for reading .csv files but read.table() works the same as long as you set the argument.\n\nDAT &lt;- read.csv(here::here(\"data\", file_csv))",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#using-read_csv-from-readr",
    "href": "modules/reading_data_files.html#using-read_csv-from-readr",
    "title": "Reading data files",
    "section": "Using read_csv() from {readr}:",
    "text": "Using read_csv() from {readr}:\nThere are advantages to using readr::read_csv() over read.csv(), which is why we will prefer it. We will assign it to an object named DAT2.\n\nDAT2 &lt;- readr::read_csv(here::here(\"data\", file_csv))\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): time, name, year, event, team\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(DAT2)\n\n# A tibble: 6 × 5\n  time  name             year  event   team  \n  &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 23.29 Jocelyn Crawford 2019  50 FREE Athena\n2 23.31 Ava Sealander    2022  50 FREE Athena\n3 23.49 Kelly Ngo        2016  50 FREE Athena\n4 23.71 Helen Liu        2014  50 FREE Athena\n5 23.76 Michele Kee      2014  50 FREE Athena\n6 23.77 Natalia Orbach-M 2020  50 FREE Athena\n\n\nWe can test whether DAT and DAT2 are the same using a logical test ==. Notice the two =. If we use one =, we will actually assign the contents of DAT2 to DAT because a single = in this context (scope) will do the same as &lt;-. A discussion of the differences is beyond the scope here but suffice it so say &lt;- is the common practice except when you are writing custom functions. In most cases, assignment inside functions are done with = because objects created inside a function are not typically needed outside that scope.\nAnyway, you can see that the contents are the same even when files are read by different functions. This is wrapped in the all() function, which will return TRUE if everything is TRUE. This is good that the contents are identical.\n\nall(DAT == DAT2)\n\n[1] TRUE",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#data-as-a-data-frame",
    "href": "modules/reading_data_files.html#data-as-a-data-frame",
    "title": "Reading data files",
    "section": "Data as a Data Frame",
    "text": "Data as a Data Frame\nYou should see an object named DAT that contains the data frame with some swim data. If you want to verify this is actually a data frame object, you can pass the DAT object into the is.data.frame() function. The function will return TRUE if it is and FALSE if it is not.\n\nis.data.frame(DAT)\n\n[1] TRUE\n\nis.data.frame(DAT2)  # tibbles are also data frames\n\n[1] TRUE",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "modules/reading_data_files.html#are-they-both-tibbles",
    "href": "modules/reading_data_files.html#are-they-both-tibbles",
    "title": "Reading data files",
    "section": "Are they both tibbles?",
    "text": "Are they both tibbles?\nTibbles are different from data frames, see the {tibble} library.\n\ntibble::is_tibble(DAT)\n\n[1] FALSE\n\ntibble::is_tibble(DAT2)\n\n[1] TRUE\n\n\nNow the you have the data frame, you can examine some of its contents, for example, the first 6 rows using the head() function.\n\nhead(DAT)    # hmm, something seems off.\n\n   time             name year   event   team\n1 23.29 Jocelyn Crawford 2019 50 FREE Athena\n2 23.31    Ava Sealander 2022 50 FREE Athena\n3 23.49        Kelly Ngo 2016 50 FREE Athena\n4 23.71        Helen Liu 2014 50 FREE Athena\n5 23.76      Michele Kee 2014 50 FREE Athena\n6 23.77 Natalia Orbach-M 2020 50 FREE Athena\n\n\nBecause header rows do exist atop the .csv file, specify that they exist by passing TRUE to the header argument of the function (e.g., header = TRUE or header = T).\n\nDAT &lt;- read.table(here::here(\"data\", file_csv),\n                  sep = \",\", \n                  header = TRUE\n                  )\n\nhead(DAT)    # Perfect!\n\n   time             name year   event   team\n1 23.29 Jocelyn Crawford 2019 50 FREE Athena\n2 23.31    Ava Sealander 2022 50 FREE Athena\n3 23.49        Kelly Ngo 2016 50 FREE Athena\n4 23.71        Helen Liu 2014 50 FREE Athena\n5 23.76      Michele Kee 2014 50 FREE Athena\n6 23.77 Natalia Orbach-M 2020 50 FREE Athena",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Reading data files**"
    ]
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#r-is-an-interpreted-language",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#r-is-an-interpreted-language",
    "title": "R, RStudio, & Rmarkdown",
    "section": "R is an Interpreted Language",
    "text": "R is an Interpreted Language\n\n\ncode or programs you write execute in real time\nby he R interpreter that translates your code\ncode does not need to be compiled prior to being executed"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#r-involves-functional-programming",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#r-involves-functional-programming",
    "title": "R, RStudio, & Rmarkdown",
    "section": "R involves functional programming",
    "text": "R involves functional programming\n\n\nhttps://en.wikipedia.org/wiki/Functional_programming\nprograms are constructed by applying and composing functions\nfunctions:\n\nmean()\ndplyr::summarize()"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Some basics",
    "text": "Some basics\n\n\nnumeric objects (e.g., 2024, 21.2)\nstrings/character objects:\n\ncomposed of letters\nenclosed by quotes (e.g., \"Sam\", \"Male\", \"21\")\n\nvector objects:\n\ncollections of objects (e.g., c(\"18\", \"23\", \"20\"))\n\ndata frames:\n\ncollections of vectors"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Some basics (cont.)",
    "text": "Some basics (cont.)\n\n\nwe assign objects to names/names to objects\n\nages &lt;- c(\"18\", \"23\", \"20\")\n\nwe perform functions on objects:\n\nas.numeric(ages)\noften by assigning or reassigning:\n\nages &lt;- as.numeric(ages)"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.-1",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.-1",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Some basics (cont.)",
    "text": "Some basics (cont.)\n\n\nwe inspect object contents\n\nages\nand get something returned: [1] 18 23 20\n\nwe perform more functions on objects:\n\nmean(ageas.numeric(ages))\n[1] 20.33333\n\nwe model data frames"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#open-rstudio",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#open-rstudio",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Open RStudio",
    "text": "Open RStudio\n\n\nfind the Console\nfind the Terminal\nfind ‘environment’ in pane\nfind ‘history’ in pane\nfind ‘help’ in pane\nfind ‘files’ in pane\nfind ‘plots’ in pane"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-code-in-the-r-console",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-code-in-the-r-console",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Write some code in the R console",
    "text": "Write some code in the R console\n\n\n\nyear &lt;- 2024\n\n\n\n\ncode\nyear &lt;- 2024\n\n\n\nassign objects to names using &lt;-, not ="
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#write-more-code-in-the-r-console",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#write-more-code-in-the-r-console",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Write more code in the R console",
    "text": "Write more code in the R console\n\n\n\nages &lt;- c(18, 22, 24)\n\n\n\n\ncode\nages &lt;- c(18, 22, 24)\n\n\n\n[1] 18 22 24"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#rstudio",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#rstudio",
    "title": "R, RStudio, & Rmarkdown",
    "section": "RStudio",
    "text": "RStudio\n\nIDE for using R\nmake for a better coding experience\nlots of extras\n\nbetter UI, markdown, Terminal, Git, code snippets"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#r-markdown",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#r-markdown",
    "title": "R, RStudio, & Rmarkdown",
    "section": "R Markdown",
    "text": "R Markdown\n\n\nMarkdown is a lightweight markup language used for adding formatting elements to plain text text\nR Markdown is a markdown language create for R and RStudio\nAllows you to dress up text, embed and render code, reference hyperlinks, etc. within a written document\nLibraries like {rmarkdown} and {knitr} help you build HTML, pdf, and Word documents that update automatically with new data"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#create-an-r-markdown-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#create-an-r-markdown-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Create an R Markdown File",
    "text": "Create an R Markdown File\n\n\nCreate directory/folder named: fods24\nFile &gt; New File &gt; R Markdown\nName it: my_first_markdown.Rmd\nSave in: /fods24\nNOTE: Directories will be addressed for next week!"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-text-in-the-r-markdown-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-text-in-the-r-markdown-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Write some text in the R Markdown File",
    "text": "Write some text in the R Markdown File\n\nMy name is X and the year I start learning R is Y."
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#dressing-up-text",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#dressing-up-text",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Dressing up Text",
    "text": "Dressing up Text\n\n\nItalics: wrap text in *\n\n*italics*\n\nBold: wrap text in **\n\n**bold**\n\nBold Italics: wrap text in ***\n\n***bold italics***"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-and-embed-code-block",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-and-embed-code-block",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Insert and Embed Code Block",
    "text": "Insert and Embed Code Block\n\n\n```{r}\n\n```\n\n\n\n\nWindows: CLTR+ALT+I\nMac: COMMAND+ALT+I"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#create-code-in-block-assign-value-to-year",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#create-code-in-block-assign-value-to-year",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Create Code in Block: Assign value to year ",
    "text": "Create Code in Block: Assign value to year \n\n\n```{r}\nyear &lt;- 2024\n```\n\n\n\n\ncode\nyear &lt;- 2024"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#code-block-settings",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#code-block-settings",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Code block settings",
    "text": "Code block settings"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#create-a-code-block-write-some-code",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#create-a-code-block-write-some-code",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Create a code block + write some code",
    "text": "Create a code block + write some code\n\n\n```{r}\nband &lt;- \"your favorite band\"\nstate &lt;- \"the state in which you grew up\"\nname &lt;- \"your name\"\n```"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Embed code in-line (inside text)",
    "text": "Embed code in-line (inside text)\n\n\nIf you have an object in R\nYou can render the object in text\nAnd dress up the text"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-1",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-1",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Embed code in-line (inside text)",
    "text": "Embed code in-line (inside text)\n\nIf you have an object in R\nYou can render the object in text\nAnd dress up the text\n\n\n\nThe year is `r year`!"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-2",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-2",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Embed code in-line (inside text)",
    "text": "Embed code in-line (inside text)\n\nIf you have an object in R\nYou can render the object in text\nAnd dress up the text\n\n\n\nThe year is `r year`!\n\n\nThe year is 2024!"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#modify-your-text-in-the-r-markdown-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#modify-your-text-in-the-r-markdown-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Modify your text in the R Markdown File",
    "text": "Modify your text in the R Markdown File\n\n\nmake the year change by using inline code\nmake sure your inline code is after you assign the object"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#add-header-sections-and-subsections-using",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#add-header-sections-and-subsections-using",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Add header sections and subsections using #",
    "text": "Add header sections and subsections using #\n# About me\n## My favorite band\n### My favorite band from the 1990s"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-hyperlinks",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-hyperlinks",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Insert hyperlinks",
    "text": "Insert hyperlinks\n\n\n[message](url)\n[cheatsheet](https://gabrielcook.xyz/fods24/cheatsheets/rmarkdown-2.0.pdf)\ncheatsheet"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#knitting-r-markdown-files",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#knitting-r-markdown-files",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Knitting R Markdown Files",
    "text": "Knitting R Markdown Files\n\n\nAs HTML\nAs pdf\nAs Word"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#locate-the-html-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#locate-the-html-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Locate the HTML file ",
    "text": "Locate the HTML file \n\nmy_first_markdown.html"
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "",
    "text": "In this module, we familiarize ourselves with using R in RStudio as well as create files that contain both text and R using R Markdown\n\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises.\n\n\n\n\n\n\n\n{here} 1.0.1: for file path management\n{rmarkdown} 2.27: for creating markdown files",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#readings-and-preparation",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#readings-and-preparation",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "",
    "text": "Before Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#libraries",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#libraries",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "",
    "text": "{here} 1.0.1: for file path management\n{rmarkdown} 2.27: for creating markdown files",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-is-an-interpreted-language",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-is-an-interpreted-language",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "R is an Interpreted Language",
    "text": "R is an Interpreted Language\nR is an interpreted language. This means that code or programs you write may be executed by the R interpreter in real time. The code you write does not need to be compiled prior to being executed. Rather, the R interpreter translates your code in real time if it understands your code. If the R interpreter doesn’t understand your code, it will be unable to translate and you will receive some error.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#functions",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#functions",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "Functions",
    "text": "Functions\nThe code you write for the interpreter will involve referencing functions. A function is nothing more than a set of statements organized together to perform some desired operation. In R, a function is an object. This means the R interpreter passes control to the function, along with any arguments that are necessary for the function to perform that operation and return the result of that operation. In order to install libraries to perform various operations, you will need a function like install.packages() or pacman::p_load()).",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#a-function-example",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#a-function-example",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "A Function Example",
    "text": "A Function Example\nFor example, reading a file into R involves using a function that performs that operation. For these functions to read a file containing data, you will need to specify the required and/or optional arguments for given parameters of the function. Given prerequisite courses, functions and coding basics will not be covered extensively in this course. If a refresher is needed, one is here. Nevertheless, one such function is read.table() which is used to read tabular data files. Another function is read.csv(), which is a special case of read.table(). For this function to read a file, you would need to specify the file argument (and file path if the file is not in your working directory) argument at very least so that R knows what file to read. Another function you may use is data.frame() which is used to create data frames. Using R depends on using functions that are designed to handle various tasks. Unlike some languages, we will not have to create many of our own functions but instead will leverage the work of R developers.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#internal-help",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#internal-help",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "Internal Help",
    "text": "Internal Help\nYou will certainly run into problems coding. When you don’t speak the language perfectly, R will let you know there are errors. So, how do you find help in R?\nTo ask R about what a function does, you can use ? paired with the function. In the Help window, you will see information about the package the function is from, how it is used, how to use it by specifying arguments (more on this later), and usually some examples of how it is used.\n?install.packages\n?install.packages\nWe will not actually use install.packages() often. Instead, we will use p_load() from the {pacman} library. So, let’s install that library.\ninstall.packages(\"pacman\")\nNo that you have {pacman} installed, let’s use it to install several other libraries.\npacman::p_load(tidyverse, here, DT, data.table, fs, ragg, readxl, remotes)\nAnother function is the help() function:\n\nhelp(\"install.packages\")\nhelp(\"install.packages\", package = \"utils\")\n\nNote, ?install.packages might be easier to type than help(), however.\nThese methods are all equivalent ways of getting help:\nhelp(\"summarize\")\n\n?summarize\n\n?summarize::summarize\nYou can also simply type a query into the search bar in the RStudio Help menu tab (likely to the right).",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#external-help",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#external-help",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "External Help",
    "text": "External Help\nSometimes you need to find help outside of the R environment. In this case, just use Google. Type in your query by including the letter R to narrow the search results and you will see a lot that pops up. https://stackoverflow.com will likely be returned in your search results with questions that people have posted to the website for help from others. This is a community of coders helping coders. You can create an account if you wish, but reading questions and answers to those questions is free. Perhaps in years from now, you can answer questions for others.\nFor example, if you know you are using the {dplyr} library and you are using a function called starts_with(), you can search Google for “dplyr starts_with r” and this is what you will see",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-markdown-code-execution",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-markdown-code-execution",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "R Markdown: Code Execution",
    "text": "R Markdown: Code Execution\nThis exercise is created with R Markdown code. R Markdown is a version of Markdown, which is a markup language for creating formatted text output using a plain-text. You are likely familiar with the most famous markup language, HTML (Hypertext Markup Language), which makes websites readable for us all.\nWithin this R Markdown file, the code is written between particular tick marks ``` and curly braces and {r}. These special character combinations simply allow RStudio to know what is R code (e.g., the lowercase r) and what is written text.\nIn RStudio, you can modify the code block/chunk by clicking the gear to make changes. You can specify whether the code shows the output only, shows the code and the output, whether the code is executed but not shown, or whether the code is not run at all. You can also toggle one and off options to display warnings, message, and other details. You can also review other options if you wish. You’ll notice that warnings and messages will make your output ugly so hiding them is often ideal.\nThis exercise serves as a tutorial with the goal of familiarizing you with using R and R Markdown. The output will be a nice HTML file containing your results. Within the code blocks, to execute code you would put your cursor on the line and press the RUN button (see top right) or press CONTROL+ENTER for PC or COMMAND+ENTER for Mac.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-markdown-cheat-sheet",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-markdown-cheat-sheet",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "R Markdown: Cheat Sheet",
    "text": "R Markdown: Cheat Sheet\nThere are many ways to customize an R Markdown file. You will need to insert R code, write text descriptions, create plots and tables, etc. In some instances you would want to include your R code or hide it from the output in their certain ways for doing that in the R Markdown language. Some of these ways are created automatically for you in RStudio when you initiate new R Markdown file. Others can be be found in this R Markdown cheat sheet. RStudio also has various cheat sheets which you can find here.\nOn the course site, there are additional cheat sheet files located on the Cheat sheet tab.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-markdown-the-definitive-guide",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#r-markdown-the-definitive-guide",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "R Markdown: The Definitive Guide",
    "text": "R Markdown: The Definitive Guide\nXie, Allaire, and Grolemund have an advanced guide for all the things you can do with R Markdown. It’s called R Markdown: The Definitive Guide",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules/introduction_to_r_rstudio_and_rmarkdown.html#some-things-you-can-do-with-rmarkdown",
    "href": "modules/introduction_to_r_rstudio_and_rmarkdown.html#some-things-you-can-do-with-rmarkdown",
    "title": "Introduction to RStudio, R Markdown, & Functions",
    "section": "Some things you can do with RMarkdown",
    "text": "Some things you can do with RMarkdown\nWrap text in * to make text italics\nItalicize this\nWrap text in ** to make text bold\nBold this\nEmbed R code inside text using r\nFor example, the average mpg for cars in the mtcars data set is 20.090625 thought that should be rounded 20.1 to be more clear.\nEmbed R code blocks using ```{r}\nAutomatically enumerate text sections flagged using #\nExample:\n# Main Section\n## 2nd Level\n### 3rd Level",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Introduction to RStudio, R Markdown, & Functions</b>"
    ]
  },
  {
    "objectID": "modules_setup/installing_git.html",
    "href": "modules_setup/installing_git.html",
    "title": "Installing Git",
    "section": "",
    "text": "The Git software is use to collaborate and communicate with a remote file repository. We will perform all the necessary tasks for using Git with RStudio and managing files at the remote repository at GitHub.\n\n\nComplete by the start of the first day of class.\n\nDownload Git (if not already installed)\nInstall Git on your computer (if not already installed)\nMake note of where you installed it. If RStudio does not recognize Git.exe on its own, you will need to supply the directory path.\n\nFollow steps below to complete.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing Git**"
    ]
  },
  {
    "objectID": "modules_setup/installing_git.html#overview",
    "href": "modules_setup/installing_git.html#overview",
    "title": "Installing Git",
    "section": "",
    "text": "The Git software is use to collaborate and communicate with a remote file repository. We will perform all the necessary tasks for using Git with RStudio and managing files at the remote repository at GitHub.\n\n\nComplete by the start of the first day of class.\n\nDownload Git (if not already installed)\nInstall Git on your computer (if not already installed)\nMake note of where you installed it. If RStudio does not recognize Git.exe on its own, you will need to supply the directory path.\n\nFollow steps below to complete.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing Git**"
    ]
  },
  {
    "objectID": "modules_setup/installing_git.html#installing-git",
    "href": "modules_setup/installing_git.html#installing-git",
    "title": "Installing Git",
    "section": "Installing Git",
    "text": "Installing Git\n\nDo I need to install Git?\n\nMac OS Users can check whether Git is already installed by typing git --version at the Mac Terminal. If a version number is returned, then Git is installed.\nWindows Users can press the Windows key (or click the Start button) and type Git in the search bar. If you see Git or Git Bash listed, then Git is installed. At the R console, you can also type system(\"git --version\") and if it is installed, the function should return the version number.\n\nDownload and Install Git (if necessary)\n\nMac OS Users can open their Terminal and type xcode-select --install. If you do not know how to open a terminal, see this link. If that approach does not work, you can visit the Git download site and follow instructions. If you try the Homebrew approach and experience problems, you may need to set a PATH variable. Students have reported to me that you do not need to do that. Instead, you can follow instructions to download the binary version referenced on the Git page.\nWindows Users can download the latest version of Git here. Download and install Git, making a note of where on your computer you are install it as you may need to locate the path for RStudio, especially if you use a portable version of Git.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing Git**"
    ]
  },
  {
    "objectID": "modules_setup/installing_git.html#git-what-is-git-why-go-through-the-trouble",
    "href": "modules_setup/installing_git.html#git-what-is-git-why-go-through-the-trouble",
    "title": "Installing Git",
    "section": "Git: What is Git? Why Go Through the Trouble?",
    "text": "Git: What is Git? Why Go Through the Trouble?\nProjects are rarely done without collaborators. Teams collaborate, leveraging team members’ work and accomplishments. Using R in conjunction with the a distributed version control system, like Git, will facilitate that collaboration process. Writing flexible R code that does not hard-code objects will allow your research project to be reproducible, for example, when variables and data change (e.g., new data added, a new year added, etc.). Git long with GitHub will allow you to track your edits (the version control) and share your code with your collaborators or interested scholars.\nSome benefits of using version control:\n\nMakes reverting back to previous states easy. You can easily revert back to a previous version of your code in the event you discover errors or you delete critical details accidentally.\nServes as a memory for edits when memory fails. All changes across different versions of your code or written content is available.\n\nFacilitates project sharing\nFacilitates collaboration. Others can also report errors or suggest features to your project.\n\nRStudio integrates support for Git but this interface is a little clunky. You can use it but RStudio also allows for communication via the command line Terminal, which will be the preferred method shared here.\nAll of the aforementioned benefits of Git will not experienced in this course. For your team project, the code lead will manage the repository on their own using the work contributed by the team. Although we will not cover much branching in this course, having some practice interacting with a remote repository is important for data science students and students pursuing graduate study that involves working with data. As such, you will manage your own repository for your personal class exercises.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing Git**"
    ]
  },
  {
    "objectID": "slides/03_functions_slides.html#some-object-types",
    "href": "slides/03_functions_slides.html#some-object-types",
    "title": "Functions, Parameters, and Arguments",
    "section": "Some Object Types",
    "text": "Some Object Types\n\n\nnumeric objects: representing numeric information (e.g., one’s age)\ncharacter objects: representing character information (e.g., one’s name or race)\nvector objects: representing more than one numeric object (e.g., ages of participants)\ndata frame objects: containing vectors of data (e.g., column variables and row instances of data)\nfunction objects: that accept one object and return an other object (e.g., the mean of numeric vector)"
  },
  {
    "objectID": "slides/03_functions_slides.html#object-assignment",
    "href": "slides/03_functions_slides.html#object-assignment",
    "title": "Functions, Parameters, and Arguments",
    "section": "Object Assignment",
    "text": "Object Assignment\n\n\nObjects need names\nObtained through assignment\n\nname is assigned an object; or\nobject is set to name\n\nAssignment operator &lt;-\n\nex: age &lt;- 22\nex: age &lt;- as.numeric(c(\"22\", \"25\", \"19\"))"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-objects",
    "href": "slides/03_functions_slides.html#function-objects",
    "title": "Functions, Parameters, and Arguments",
    "section": "Function Objects",
    "text": "Function Objects\n\nFunctions are special objects which contain statements for carrying out operations\n\nc() or Hmisc::Cs(): to combine elements into a vector\nmean(): to compute the mean of a numeric vector\nsource(): for reading/executing R code\ndplyr::mutate(): for creating variables in data frames\nrio::import() or readr::read_csv(): for reading data files\nreadRDS(): for reading compressed data files"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-characteristics",
    "href": "slides/03_functions_slides.html#function-characteristics",
    "title": "Functions, Parameters, and Arguments",
    "section": "Function Characteristics",
    "text": "Function Characteristics\n5 terms concepts to know:\n\n\nname (created by assignment operator &lt;-)\ndefinition (code statements or instructions for its usage)\narguments (optional variables that specify the function’s operation)\nfunction call (e.g., execution of a function)\nreturned object (value returned from the executed function)"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-statements-without-parameterargument",
    "href": "slides/03_functions_slides.html#function-statements-without-parameterargument",
    "title": "Functions, Parameters, and Arguments",
    "section": "Function Statements without Parameter/Argument",
    "text": "Function Statements without Parameter/Argument\n\n\nmy_function &lt;- function() {\n\n    statements/instructions to do something\n\n    \n    return(result of instructions)\n\n}"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-example-with-parameterargument",
    "href": "slides/03_functions_slides.html#function-example-with-parameterargument",
    "title": "Functions, Parameters, and Arguments",
    "section": "Function Example with Parameter/Argument",
    "text": "Function Example with Parameter/Argument\n\n\n\nget_years_since_birth &lt;- function(dob) {\n  if (!hasArg(dob)) {\n      message(\"Error: dob missing/no argument provided\")\n    } \n  else {\n    # make string a data\n    dob = lubridate::as_date(dob) \n    # obtain the difference in time in days\n    diff = difftime(time1 = Sys.Date(), time2 = dob, units = \"days\")\n    # create age based on days in year\n    age = as.numeric(diff / 365.25)\n    # return the age in years, truncated \n    return(trunc(age))\n  }\n}"
  },
  {
    "objectID": "slides/03_functions_slides.html#functions-in-libraries",
    "href": "slides/03_functions_slides.html#functions-in-libraries",
    "title": "Functions, Parameters, and Arguments",
    "section": "Functions in Libraries",
    "text": "Functions in Libraries\n\n\n{dplyr}: for wrangling data frames\n{ggplot2}: for plotting data\n{tidyverse}: for loading all libraries in the tidyverse ecosystem\n{easystats}: for loading all libraries in the easystats ecosystem"
  },
  {
    "objectID": "slides/03_functions_slides.html#loadingimporting-functions-from-libraries",
    "href": "slides/03_functions_slides.html#loadingimporting-functions-from-libraries",
    "title": "Functions, Parameters, and Arguments",
    "section": "Loading/Importing Functions from Libraries",
    "text": "Loading/Importing Functions from Libraries\n\n\nLoading all functions:\n\nlibrary(dplyr)\n\nLoading order matters: Function of the same name will overwrite others"
  },
  {
    "objectID": "slides/03_functions_slides.html#calling-functions-from-libraries",
    "href": "slides/03_functions_slides.html#calling-functions-from-libraries",
    "title": "Functions, Parameters, and Arguments",
    "section": "Calling Functions from Libraries",
    "text": "Calling Functions from Libraries\n\n\nIf loaded:\n\nmutate() (from {dplyr})\n\nIf not loaded:\n\neeptools::age_calc(): for calculating age based on a date\n:: calls ensures choice (duplicate function names in different libraries)"
  },
  {
    "objectID": "cheatsheets_and_tips/symbols.html",
    "href": "cheatsheets_and_tips/symbols.html",
    "title": "Symbols",
    "section": "",
    "text": "Symbol\nTerm\n\n\n\n\n&lt;-\nassignment operator\n\n\n()\n(round) brackets / parentheses\n\n\n[]\nsquare brackets\n\n\n{}\ncurly brackets\n\n\n&lt;&gt;\nchevrons/angled brackets\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n#\nhash/pound\n\n\n/\nforward slash\n\n\n\\\nbackslash\n\n\n-\ndash/hyphen/minus\n\n\n_\nunderscore\n\n\n*\nasterisk/star\n\n\n^\ncaret/power symbol\n\n\n~\ntilde/twiddle\n\n\n=\nequal sign\n\n\n==\ndouble equal sign (logical equivalence)\n\n\n.\nfull stop/period/point\n\n\n|&gt;\npipe (see also %&gt;% for {magrittr})\n\n\n&\nampersand/and (“and” operator)\n\n\n|\nvertical bar/pipe (“or” operator)\n\n\n!\nexclamation mark/bang (“not” operator)\n\n\n?\nquestion mark\n\n\n’\nsingle quote/apostrophe"
  },
  {
    "objectID": "slides/02_git.html#version-control",
    "href": "slides/02_git.html#version-control",
    "title": "Git and GitHub",
    "section": "Version Control",
    "text": "Version Control\n\n\nWhat is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/02_git.html#version-control-git-workflow-basics",
    "href": "slides/02_git.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are three main parts to Git Workflow:\n\n\nVersion control for files (not empty directories)\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nVersion Control Workflow Basics\nOther Parts\n\nPush for sending commits to GitHub\nMerge for merging branches (i.e., to incorporate your edits into main)"
  },
  {
    "objectID": "slides/02_git.html#git-image-version",
    "href": "slides/02_git.html#git-image-version",
    "title": "Git and GitHub",
    "section": "Git: Image Version",
    "text": "Git: Image Version\nunderstanding git through images"
  },
  {
    "objectID": "slides/02_git.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/02_git.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/02_git.html#configuring-git-and-github-with-usethis",
    "href": "slides/02_git.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/02_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/02_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/02_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/02_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/02_git.html#some-basic-commands",
    "href": "slides/02_git.html#some-basic-commands",
    "title": "Git and GitHub",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\n\nFork: to make a copy of a repo in your own GitHub account\nClone: make a copy of the your GitHub repo on your local computer. * copies a remote repo to create a local repo with a remote called origin automatically set up."
  },
  {
    "objectID": "slides/02_git.html#some-basic-commands-cont.",
    "href": "slides/02_git.html#some-basic-commands-cont.",
    "title": "Git and GitHub",
    "section": "Some Basic Commands (Cont.)",
    "text": "Some Basic Commands (Cont.)\n\nPull: incorporates changes into your repo from remote\nAdd: adds snapshots of your changes to the “Staging” area.\nCommit: takes the files as they are in your staging area and stores a snap shot of your files (changes) permanently in your Git directory\nPush: uploads your files (changes) to the remote repo\nStatus: checks the status of a repo changes, etc.\nMerge: incorporates changes into the branch you are on.\nPull Request: By “issuing a pull request” to the owner of the upstream repo, you are requesting that your changes be pulled into their repo (accept your changes/work)."
  },
  {
    "objectID": "slides/02_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/02_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file, save to local computer\nCheck status of project for changes\nAdd/Stage change\nCommit change(s)\nPush changes\nPull pulls changes down from repo (downloads and merges changes)\nFetch downloads new data (does not change your working copy)"
  },
  {
    "objectID": "slides/02_git.html#checking-the-status-of-local-file-changes",
    "href": "slides/02_git.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the Status of Local File Changes",
    "text": "Checking the Status of Local File Changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/02_git.html#shared-repository-workflow",
    "href": "slides/02_git.html#shared-repository-workflow",
    "title": "Git and GitHub",
    "section": "Shared Repository Workflow",
    "text": "Shared Repository Workflow\n\n\nPull recent changes from main: git pull\nMake changes to files\nStage your changes: git add\nCommit changes locally: git commit -m \"description of changes\"\nUpload your new the changes to GitHub: git push"
  },
  {
    "objectID": "slides/02_git.html#staging-changes-adding-changes",
    "href": "slides/02_git.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/02_git.html#staging-a-specific-change",
    "href": "slides/02_git.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/02_git.html#staging-all-changes",
    "href": "slides/02_git.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/02_git.html#committing-the-changes",
    "href": "slides/02_git.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/02_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/02_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/02_git.html#pulls-changes-from-the-remote-repository",
    "href": "slides/02_git.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/02_git.html#git-client-video-tutorials",
    "href": "slides/02_git.html#git-client-video-tutorials",
    "title": "Git and GitHub",
    "section": "Git Client Video Tutorials",
    "text": "Git Client Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/02_git.html#videos-of-many-things-you-can-do",
    "href": "slides/02_git.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "resources/tools.html#websites",
    "href": "resources/tools.html#websites",
    "title": "Tools for Foundations of Data Science",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/"
  },
  {
    "objectID": "resources/tools.html#books",
    "href": "resources/tools.html#books",
    "title": "Tools for Foundations of Data Science",
    "section": "Books",
    "text": "Books\n\nLots of alternative books https://www.bigbookofr.com/data-visualization.html"
  },
  {
    "objectID": "modules/syllabus.html",
    "href": "modules/syllabus.html",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "",
    "text": "This course is a research practicum with a Psychology faculty member, focusing on different aspects of scientific psychological research, including experiment design, data collection, literature review, data analysis, and conference presentation or manuscript preparation.\nThis class differs from PSYC199 CM - Independent Study in Psychology in that the research must be part of the faculty member’s continuous line of inquiry within that faculty member’s research lab.\nStudents may register for:\n- 0.25 credit (at least 5 hours per week; 8-10 page paper or equivalent academic work)\n- 0.5 credit (at least 10 hours per week; 15-20 page paper or equivalent academic work)\n- PSYC197B CM (non-credit) – Students must fully participate in lab activities but do not submit a research paper.\nMaximum of 1 credit may count toward graduation.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#research-activities",
    "href": "modules/syllabus.html#research-activities",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Research Activities",
    "text": "Research Activities\nRAs will participate in:\n\nLiterature Searches: PsycInfo, ResearchRabbit, Zotero\n\nData Collection: CITI certification, SonaSystems, participant management\n\nExperiment Programming: PsychoPy, Python, JavaScript, Qualtrics\n\nData Analysis: R, RStudio, Git, GitHub\n\nCommunication: Regular updates via Discord and GitHub\n\nTime Commitment:\n- 0.25 Credit: 5 hours/week\n- 0.5 Credit: 10 hours/week\n- PSYC197B CM (Non-credit): Full participation required\nRAs must be professional, reliable, punctual, and able to work independently and collaboratively.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#why-professionalism-matters",
    "href": "modules/syllabus.html#why-professionalism-matters",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Why Professionalism Matters",
    "text": "Why Professionalism Matters\n\nResearch labs function like professional workplaces – deadlines, communication, and responsibility matter.\n\nMany graduate schools and employers request letters of recommendation that assess professional skills.\n\nPoor communication and missed deadlines negatively impact opportunities.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#expectations",
    "href": "modules/syllabus.html#expectations",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Expectations",
    "text": "Expectations\n\nTreat Research Like a Job – Complete work on time and ask for help when needed.\n\nCommunicate Clearly – Respond to messages within 24-48 hours.\n\nBe Accountable – Keep records, follow through on assignments, and update work logs.\n\nMaintain Data Privacy – Data cannot be stored on unauthorized cloud servers (e.g., Google Drive).\n\nFailure to meet these expectations affects grading and recommendation letters.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#final-research-contribution",
    "href": "modules/syllabus.html#final-research-contribution",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Final Research Contribution",
    "text": "Final Research Contribution\n\n\n\nCredit\nRequirement\n\n\n\n\n0.25\n8-10 page research paper (or equivalent)\n\n\n0.5\n15-20 page research paper (or equivalent)\n\n\nNon-credit\nNo research paper required",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#data-privacy-intellectual-property",
    "href": "modules/syllabus.html#data-privacy-intellectual-property",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Data Privacy & Intellectual Property",
    "text": "Data Privacy & Intellectual Property\n\nAll work is intellectual property of the Cognition and Data Visualization Laboratory.\n\nData must not be stored on cloud servers (Google Drive, Dropbox, Box) unless approved.\n\nData files must be deleted from personal computers after lab duties end.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#professionalism-responsibility",
    "href": "modules/syllabus.html#professionalism-responsibility",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Professionalism & Responsibility",
    "text": "Professionalism & Responsibility\n\nTreat this course as a professional research role.\n\nUnreliable communication, missed deadlines, and incomplete work negatively affect evaluations and recommendations.\n\nResearch requires discipline, accountability, and teamwork – essential skills in any career.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/syllabus.html#collaboration-independence",
    "href": "modules/syllabus.html#collaboration-independence",
    "title": "PSYC197A/B: Directed Research Syllabus",
    "section": "Collaboration & Independence",
    "text": "Collaboration & Independence\n\nCollaboration is encouraged, but students must demonstrate independent work ethic.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>PSYC197A/B: Directed Research Syllabus</b>"
    ]
  },
  {
    "objectID": "modules/links.html",
    "href": "modules/links.html",
    "title": "Links",
    "section": "",
    "text": "Study Links:\n\nPlanning and Cognition - Shapes and Colors pm with green circle\n\nRoom Search:\n\navailability\nreserve",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Links</b>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Nothing to see here"
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Modules",
    "section": "",
    "text": "In general, modules will contain examples, readings, and additional resources. The modules will be updated from time to time.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>"
    ]
  },
  {
    "objectID": "modules/index.html#module-structure",
    "href": "modules/index.html#module-structure",
    "title": "Modules",
    "section": "",
    "text": "In general, modules will contain examples, readings, and additional resources. The modules will be updated from time to time.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>"
    ]
  },
  {
    "objectID": "modules_setup/index.html",
    "href": "modules_setup/index.html",
    "title": "Installation & Setup",
    "section": "",
    "text": "We will use the R programming language to manipulate data and create data visualizations. Although you may have a preferred IDE other than RStudio, my recommendation is to use RStudio. All instructions will assume you are using RStudio. For report documents, we will use the R Markdown language. RStudio projects will be used for managing your work space in order to simplify your working directory and file paths, manage history, and your R Markdown files (e.g., .Rmd) and code script files (.R). These RStudio projects will be version-control projects maintained at a remote repository on GitHub.com. Finally, the Git program will be used to communicate with that remote repository.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>"
    ]
  },
  {
    "objectID": "modules_setup/index.html#overview",
    "href": "modules_setup/index.html#overview",
    "title": "Installation & Setup",
    "section": "",
    "text": "We will use the R programming language to manipulate data and create data visualizations. Although you may have a preferred IDE other than RStudio, my recommendation is to use RStudio. All instructions will assume you are using RStudio. For report documents, we will use the R Markdown language. RStudio projects will be used for managing your work space in order to simplify your working directory and file paths, manage history, and your R Markdown files (e.g., .Rmd) and code script files (.R). These RStudio projects will be version-control projects maintained at a remote repository on GitHub.com. Finally, the Git program will be used to communicate with that remote repository.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>"
    ]
  },
  {
    "objectID": "modules_setup/index.html#setup-structure",
    "href": "modules_setup/index.html#setup-structure",
    "title": "Installation & Setup",
    "section": "Setup Structure",
    "text": "Setup Structure\n\nInstall R\nInstall RStudio\nCreate a GitHub account if you do not have one\nInstall Git if your computer system needs it (e.g., not installed)",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>"
    ]
  },
  {
    "objectID": "slides/023_git.html#version-control",
    "href": "slides/023_git.html#version-control",
    "title": "Git and GitHub",
    "section": "Version Control",
    "text": "Version Control\n\n\nWhat is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/023_git.html#version-control-git-workflow-basics",
    "href": "slides/023_git.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are three main parts to Git Workflow:\n\n\nVersion control for files (not empty directories)\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nVersion Control Workflow Basics"
  },
  {
    "objectID": "slides/023_git.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/023_git.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/023_git.html#configuring-git-and-github-with-usethis",
    "href": "slides/023_git.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/023_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/023_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/023_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/023_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/023_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/023_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file\nCheck status of project for changes\nStage change\nCommit all changes\nPush changes\nCommit a specific change\nPull changes down from repo (downloads and integrates changes)\nFetch downloads new data (does not change your working copy)"
  },
  {
    "objectID": "slides/023_git.html#checking-the-status-of-local-file-changes",
    "href": "slides/023_git.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the status of local file changes",
    "text": "Checking the status of local file changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/023_git.html#staging-changes-adding-changes",
    "href": "slides/023_git.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/023_git.html#staging-a-specific-change",
    "href": "slides/023_git.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/023_git.html#staging-all-changes",
    "href": "slides/023_git.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/023_git.html#committing-the-changes",
    "href": "slides/023_git.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/023_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/023_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/023_git.html#pulls-changes-from-the-remote-repository",
    "href": "slides/023_git.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/023_git.html#fetch-changes",
    "href": "slides/023_git.html#fetch-changes",
    "title": "Git and GitHub",
    "section": "Fetch changes",
    "text": "Fetch changes"
  },
  {
    "objectID": "slides/023_git.html#video-tutorials",
    "href": "slides/023_git.html#video-tutorials",
    "title": "Git and GitHub",
    "section": "Video Tutorials",
    "text": "Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/023_git.html#videos-of-many-things-you-can-do",
    "href": "slides/023_git.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "slides/02_git_slides.html#what-is-version-control-for",
    "href": "slides/02_git_slides.html#what-is-version-control-for",
    "title": "Git and GitHub",
    "section": "What is version control for?",
    "text": "What is version control for?\n\n\nProject backup\nGit monitors/controls file versions (empty directories).\nSee specific changes inside files\nUndo changes (time machine)\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/02_git_slides.html#version-control-git-workflow-basics",
    "href": "slides/02_git_slides.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are 4 main parts to Git Workflow:\n\n\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nPush for sending commits to remote repo (on GitHub)\n\n\nOther: Merge for merging branches (i.e., to incorporate your edits into main)\nVideo of Version Control Workflow Basics\n\n\n\n## **Git: Image Version**\n\n@[understanding git through images](https://dev.to/nopenoshishi/understanding-git-through-images-4an1)"
  },
  {
    "objectID": "slides/02_git_slides.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/02_git_slides.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/02_git_slides.html#configuring-git-and-github-with-usethis",
    "href": "slides/02_git_slides.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/02_git_slides.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/02_git_slides.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/02_git_slides.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/02_git_slides.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/02_git_slides.html#some-basic-commands",
    "href": "slides/02_git_slides.html#some-basic-commands",
    "title": "Git and GitHub",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\n\nFork: to make a copy of a repo in your own GitHub account\nClone: make a copy of the your GitHub repo on your local computer. * copies a remote repo to create a local repo with a remote called origin automatically set up."
  },
  {
    "objectID": "slides/02_git_slides.html#some-basic-commands-cont.",
    "href": "slides/02_git_slides.html#some-basic-commands-cont.",
    "title": "Git and GitHub",
    "section": "Some Basic Commands (Cont.)",
    "text": "Some Basic Commands (Cont.)\n\nPull: incorporates changes into your repo from remote\nAdd: adds snapshots of your changes to the “Staging” area.\nCommit: takes the files as they are in your staging area and stores a snap shot of your files (changes) permanently in your Git directory\nPush: uploads your files (changes) to the remote repo\nStatus: checks the status of a repo changes, etc."
  },
  {
    "objectID": "slides/02_git_slides.html#some-basic-commands-cont.-1",
    "href": "slides/02_git_slides.html#some-basic-commands-cont.-1",
    "title": "Git and GitHub",
    "section": "Some Basic Commands (Cont.)",
    "text": "Some Basic Commands (Cont.)\n\nMerge: incorporates changes into the branch you are on.\nPull Request: By “issuing a pull request” to the owner of the upstream repo, you are requesting that your changes be pulled into their repo (accept your changes/work)."
  },
  {
    "objectID": "slides/02_git_slides.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/02_git_slides.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file, save to local computer\nCheck status of project for changes\nAdd/Stage change\nCommit change(s)\nPush changes\nPull pulls changes down from repo (downloads and merges changes)"
  },
  {
    "objectID": "slides/02_git_slides.html#checking-the-status-of-local-file-changes",
    "href": "slides/02_git_slides.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the Status of Local File Changes",
    "text": "Checking the Status of Local File Changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/02_git_slides.html#shared-repository-workflow",
    "href": "slides/02_git_slides.html#shared-repository-workflow",
    "title": "Git and GitHub",
    "section": "Shared Repository Workflow",
    "text": "Shared Repository Workflow\n\n\nPull recent changes from main: git pull\nMake changes to files\nStage your changes: git add\nCommit changes locally: git commit -m \"description of changes\"\nUpload your new the changes to GitHub: git push"
  },
  {
    "objectID": "slides/02_git_slides.html#staging-changes-adding-changes",
    "href": "slides/02_git_slides.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/02_git_slides.html#staging-a-specific-change",
    "href": "slides/02_git_slides.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/02_git_slides.html#staging-all-changes",
    "href": "slides/02_git_slides.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/02_git_slides.html#committing-the-changes",
    "href": "slides/02_git_slides.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/02_git_slides.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/02_git_slides.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/02_git_slides.html#pulls-changes-from-the-remote-repository",
    "href": "slides/02_git_slides.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/02_git_slides.html#git-client-video-tutorials",
    "href": "slides/02_git_slides.html#git-client-video-tutorials",
    "title": "Git and GitHub",
    "section": "Git Client Video Tutorials",
    "text": "Git Client Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/02_git_slides.html#videos-of-many-things-you-can-do",
    "href": "slides/02_git_slides.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "index.html#what-we-do",
    "href": "index.html#what-we-do",
    "title": "Cognition & Data Visualization (CDV) Lab",
    "section": "What we do",
    "text": "What we do\nIn the Cognition and Data Visualization (CDV) lab, our research focuses on understanding how people perceive, attend to, interpret, remember, and make decisions from data visualizations. In particular, we are interested in understanding the cognitive constraints, limitations, and biases associated with the daily task of understanding data through visualizations. We also study how attention, cognitive control, and working memory relate to other cognitive behaviors like memory and decision making.\nAs an individual living with vision difficulties associated with pathological myopia, I am also interested in understanding how the rich visual information communicated through data visualizations can be made accessible to individuals with vision difficulties (e.g., blindness, low-vision, etc.).\nStudents interested in studying data visualization should contact me here or visit me on campus."
  },
  {
    "objectID": "index.html#skills-and-tools",
    "href": "index.html#skills-and-tools",
    "title": "Cognition & Data Visualization (CDV) Lab",
    "section": "Skills and Tools",
    "text": "Skills and Tools\n\nData Analysis: R, RStudio\nGit: GitHub, GitLab, GitDesktop\nExperimental Design: E-prime, PsychoPy (Python & JavaScript), Gorilla (JavaScript)\nExperiment Management: Sona-Systems (local experiments); Pavlovia & Prolific (for identifying samples for online data collection across the globe)\nSurveys: Qualtrics"
  },
  {
    "objectID": "cheatsheets_and_tips/cheatsheets.html",
    "href": "cheatsheets_and_tips/cheatsheets.html",
    "title": "Cheatsheets Links",
    "section": "",
    "text": "Load necessary libraries\nlibrary(dplyr) library(knitr)\n\n\nDefine a function to get all PDF links\nget_all_pdf_links &lt;- function(url) { library(rvest)\n# Read the webpage page &lt;- try(read_html(url), silent = TRUE)\n# Handle the case where the URL isn’t a valid webpage if (inherits(page, “try-error”)) { return(“Unable to read the webpage. Please check the URL.”) }\n# Extract all links on the page links &lt;- page |&gt; html_nodes(“a”) |&gt; html_attr(“href”)\n# Filter for valid URLs (ignoring ‘null’ values) valid_links &lt;- links[!is.na(links) & links != “”]\n# Create full URLs (GitHub links) full_links &lt;- paste0(“https://github.com”, valid_links)\n# Remove duplicates full_links &lt;- unique(full_links)\n# Filter for PDF links pdf_links &lt;- full_links[grepl(“\\.pdf$”, full_links, ignore.case = TRUE)]\nreturn(pdf_links) }\n\n\nDefine a function to create a data frame for the table\ncreate_pdf_table &lt;- function(pdf_links) { data.frame( Name = basename(pdf_links) |&gt; tools::file_path_sans_ext(), URL = pdf_links, Cheatsheet = basename(pdf_links) |&gt; tools::file_path_sans_ext(), stringsAsFactors = FALSE ) }\n\n\nExample usage\nurl &lt;- “https://github.com/rstudio/cheatsheets” all_pdf_links &lt;- get_all_pdf_links(url) pdf_table &lt;- create_pdf_table(all_pdf_links)\n\n\nPrint the table\nkable(pdf_table, caption = “Cheatsheets PDF Links”)"
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html",
    "href": "modules/project_management/setting_up_git_and_github.html",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "",
    "text": "We will perform all the necessary tasks for using Git with RStudio and managing files at the remote repository at GitHub.\n\n\n\nCreate a GitHub account\nCreate GitHub repository from a template repository\nCheck that Git is setup in RStudio\nConfigure Git for R, within R/RStudio (a familiar context)\n\nCreate a Personal Access Token (PAT)\nSet your Git Credentials (using your PAT)\n\n\nWarning: Do not try to create an RStudio version control project from a repo before completing these steps.\nFollow steps below to complete.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#overview",
    "href": "modules/project_management/setting_up_git_and_github.html#overview",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "",
    "text": "We will perform all the necessary tasks for using Git with RStudio and managing files at the remote repository at GitHub.\n\n\n\nCreate a GitHub account\nCreate GitHub repository from a template repository\nCheck that Git is setup in RStudio\nConfigure Git for R, within R/RStudio (a familiar context)\n\nCreate a Personal Access Token (PAT)\nSet your Git Credentials (using your PAT)\n\n\nWarning: Do not try to create an RStudio version control project from a repo before completing these steps.\nFollow steps below to complete.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#libraries-used",
    "href": "modules/project_management/setting_up_git_and_github.html#libraries-used",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Libraries Used",
    "text": "Libraries Used\n\n{usethis}: 2.2.3: for project workflow automation\n{gitcreds}: 0.1.2: for querying git credentials",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#creating-a-github-account",
    "href": "modules/project_management/setting_up_git_and_github.html#creating-a-github-account",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Creating a GitHub Account",
    "text": "Creating a GitHub Account\n\nGo to GitHub and create a free GitHub account. Make note of your username and your associated e-mail as you will need those for configuring Git with R.\n\nConsider this brief 15-minute TryGit Tutorial.\n\nStay logged in so that you can complete a later step.\nSend your PM your GitHub username once you are assigned to a team project. Your PM will send those to me and I will add you as a collaborator to a private repo.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#checking-git-setup-in-rstudio",
    "href": "modules/project_management/setting_up_git_and_github.html#checking-git-setup-in-rstudio",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Checking Git Setup in RStudio",
    "text": "Checking Git Setup in RStudio\nYou will need to tell RStudio where to find the Git program as this may not be recognize automatically.\n\nFind the path to the Git program executable that was installed in an earlier step.\n\nIn the Terminal within RStudio (not the R console), type: where git on Windows and which git on Mac/Linux to find the path to the program. If there are more than one paths listed, just make note of one of them.\nIf for some reason you don’t see a path listed using that approach, type: Sys.which(\"git\") in your R console. The path here will likely be truncated so you will have to try to fill in the gaps when performing the step to set the path. See me for help.\n\nIn RStudio, go to Tools &gt; Global Options and click on left side bar menu item Git/SVN.\nSelect the option at the top to Enable version control interface for RStudio projects if it is not selected.\nSet the path to the Git executable if it is not already there. Browse to the path to where Git.exe installed on your computer. Windows Users should make note that this path should be a path containing Git.exe and not a path containing git-bash.exe.\nClick Apply and then click OK.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#creating-a-repository-on-github-using-a-template",
    "href": "modules/project_management/setting_up_git_and_github.html#creating-a-repository-on-github-using-a-template",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Creating a Repository on GitHub Using a Template",
    "text": "Creating a Repository on GitHub Using a Template\nYou will need to create a personal repository for class exercises. You can create it by building the directory structure for it yourself. This, however, may lead to errors. Creating a project from a template will ensure all students have they same repository with the same directory structure.\n\nOnce logged into your GitHub account, go to this template repository.\nOn the top right, you will see an option to create a Use this template. Click it and select “Create a new repository”.\nName the repository cdvlab-exercises and provide a description like “for lab practice and exercises”.\n\n\n\n\n\n\n\n\n\n\n\nSelect the option to make the repository Private, check to add a README file, and add a .gitignore file by scrolling to find R:\n\n\n\n\n\n\n\n\n\n\n\nClick Create Repository\nWatch the course video if you have not already so that you know how to unpack the files for the repository as well as checking that Git is configured for RStudio.\n\nNote: Git manages files only, not directories. Directories will not populate in a repository unless they contain files. You will not see empty directories. For this reason, you may see empty files in the directory structure.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#configuring-git-and-github-for-rstudio",
    "href": "modules/project_management/setting_up_git_and_github.html#configuring-git-and-github-for-rstudio",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Configuring Git and GitHub for RStudio",
    "text": "Configuring Git and GitHub for RStudio\nThere are two ways you can set up, either using R (console) or the command line (terminal). My recommendation is to use R because that is where you are likely most familiar, if even a small degree. We will use functions from the {usethis} library to help you. This library should be installed already as part of the class setup. If you get an error stating that the library is not installed when executing the steps below, just type install.packages(\"usethis\", dep = TRUE) at your R console.\nThe {usethis} library will make connecting your R project to your github account simple. You will use usethis::use_git_config() to configure your GitHub account with Git on your computer; if you did not create, see earlier step. In the below example, you will see that we need to provide two character strings as arguments to the function. The strings are used to set your user.name and your user.email (the e-mail attached to your GitHub account). Double check your GitHub e-mail and username. Make sure that the username and e-mail are correct. You may need to check your e-mail in GitHub’s e-mail account settings.\nEdit the following code to include your username and email and then execute your modified R code:\nusethis::use_git_config(user.name = \"github_username\", \n                        user.email = \"github_email@gitrdone.com\"\n                        )\nDone!\nNote:: This function does not return anything so if you are waiting for some exciting feedback, you will not see any.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#creating-a-personal-access-token-pat-for-github",
    "href": "modules/project_management/setting_up_git_and_github.html#creating-a-personal-access-token-pat-for-github",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Creating a Personal Access Token (PAT) for GitHub",
    "text": "Creating a Personal Access Token (PAT) for GitHub\nBefore completing this step, log into your GitHub account to facilitate the communication between RStudio and GitHub.\nYou will need a personal access token (PAT) for making remote changes to GitHub. A first step then is to create a PAT using usethis::create_github_token(). Second, you will register your PAT with the Git credential manager used by your computers operating system using gitcreds::gitcreds_set(). Keep in mind that if you use a different computer (e.g., you get a new one), you’ll need to register the PAT on that computer following the same steps described here.\nTo create your personal access token (PAT), type the following at your R console: \nusethis::create_github_token()\nAfter executing the code, you will be taken to your GitHub account (if you remained logged in). Go to the bottom of the page and click generate token. You should add a description for it so that you can understand its use case. For example, describe it based the computer you are using it on, “my computer make and model”. You may also describe it based on a project you are working on, “token-for-project-xyz”. If you do not add a description, you will likely become overwhelmed and/or confused when you have multiple tokens. When you need to regenerate or delete a token that expires, you will not be able to determine what they are for if you do not add a description.\nAfter creating your token, Copy it to your computer’s clipboard and save it someplace safe. Do not share your token with anyone because anyone who has it can access your public or private GitHub repositories.\nWarning: Your PAT will expire after some duration, usually 30 days unless you change it. For this project, I suggest you change the expiration to a date after the semester ends to ensure you don’t have to go through this process again during the semester. Getting a new PAT is not difficult, however. If your PAT will soon expire, GitHub will send you an e-mail alerting you also. You can regenerate a PAT from a link in your e-mail, so make sure your associated e-mail is one you check.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#setting-your-git-credentials-using-pat",
    "href": "modules/project_management/setting_up_git_and_github.html#setting-your-git-credentials-using-pat",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Setting your Git Credentials (using PAT)",
    "text": "Setting your Git Credentials (using PAT)\nNow that you have a PAT, we now need to set those credentials for RStudio to communicate with your GitHub account.\nExecute the following R code to set your credentials:\ngitcreds::gitcreds_set()\nYou may see a set of number options with corresponding descriptions. If you see them, enter the number corresponding to the option that makes the most sense for what you are trying to accomplish, for example, something like “set or replace your credentials”.\nWhen should then see a prompt like ? Enter new password or token. At this point, paste your PAT here and press return/enter. Then remove the PAT from your clipboard so that you don’t paste them someplace.\nYou can check that your credentials are stored by typing the following R code in the console:\ngh::gh_whoami()\n\nUpdating your Personal Access Token (PAT)\nAt some point, even if you set your PAT to expire after the semester, it will expire and you will need to update it. When it’s about to expire (you will receive an e-mail), or if it has expired, you can repeat the steps to obtain a new toke and set your credentials in R as you did above using:\nusethis::create_github_token()\n\ngitcreds::gitcreds_set()\nAlternatively, you can go to https://github.com/settings/tokens while logged into your GitHub account and regenerate the token and change the expiration date. Then, copy the PAT to the clipboard and set your credentials again using:\ngitcreds::gitcreds_set()",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#summary",
    "href": "modules/project_management/setting_up_git_and_github.html#summary",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Summary",
    "text": "Summary\nYou have now created your GitHub account, installed and/or set up Git with RStudio and ensured Git is installed, created a repository (from a template), created a new PAT, and set you credentials. The next step will be to connect the remote GitHub repository with your RStudio setup by creating a Git Version Control RStudio project.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/setting_up_git_and_github.html#optional-resources",
    "href": "modules/project_management/setting_up_git_and_github.html#optional-resources",
    "title": "Project Management 01: Setting Up Git and GitHub for R",
    "section": "Optional Resources",
    "text": "Optional Resources\nIf you find yourself working on complicated projects, you might benefit from using a Git client or need to troubleshoot events. Although you won’t need to do this for this course, I’m providing some resources for your future. Feel free to come back to this course site to review content as I don’t intend to remove anything.\n\nGit Client: Git clients work like the RStudio Gui option described above but likely much better. If you find the Terminal command line daunting or limiting, I might recommend a Git Client to use as I am not a big fan of the RStudio interface.\n\nGitKraken is a good option and they have lots of tutorials on their website. GitKraken is seamless to set up. Install, connect your GitHub account, select your repo to add, and voilà. You can stage, commit, and push from there.\nGitHub Desktop is another common option. Install, connect your GitHub account and select your repo to add, and voilà. You can stage, commit, and push from there.\n\nTroubleshooting: happygitwithr is a resource for troubleshooting Git issues specifically with R.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 01**: Setting Up Git and GitHub for R"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html",
    "href": "modules/project_management/using_git_and_github.html",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "",
    "text": "This module focuses on getting organized. Rather than save files in a haphazard way that will just introduce stress to your life, we will focus on creating order. There are 3 main ways to create order and stay organized:\n\n1) create projects in RStudio\n2) create directories and sub-directories that leave no ambiguity about where your files are, and\n3) manage all directory paths and file paths simply using the {here} library\n4) user lowercase for files names and replaces spaces with hyphens or underscores\n\nAnother way is to connect that project with a remote repository saved someplace like GitHub for collaboration. You will use Git to interact with remote repositories connected to Projects in RStudio.\nIn order to maintain organization for data projects, you will set up a lab (aka directory) on your computer, ideally where you will always know where to look. You will then create an RStudio project and connect it to a remote private repository associated with your GitHub account. The reason for its privacy is because of data related to certain exercises.\nYou will use this RStudio project for all exercises  so that there is no ambiguity about where your files are saved. Finally, you will create directories within your new project directory so that you have an organized directory structure for storing your files. Systems paths for project files and directories will be manage using the {here} library. This process will also ensure that each student’s computer is configured in the same manner.\nReading through these steps, however, will facilitate your ability to apply the concepts and run the associated functions. Thus, all RAs will gain some basic experience with Git commands and with communicating with a remote repository. RAs will be collaborators of a repository for certain projects.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#overview",
    "href": "modules/project_management/using_git_and_github.html#overview",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "",
    "text": "This module focuses on getting organized. Rather than save files in a haphazard way that will just introduce stress to your life, we will focus on creating order. There are 3 main ways to create order and stay organized:\n\n1) create projects in RStudio\n2) create directories and sub-directories that leave no ambiguity about where your files are, and\n3) manage all directory paths and file paths simply using the {here} library\n4) user lowercase for files names and replaces spaces with hyphens or underscores\n\nAnother way is to connect that project with a remote repository saved someplace like GitHub for collaboration. You will use Git to interact with remote repositories connected to Projects in RStudio.\nIn order to maintain organization for data projects, you will set up a lab (aka directory) on your computer, ideally where you will always know where to look. You will then create an RStudio project and connect it to a remote private repository associated with your GitHub account. The reason for its privacy is because of data related to certain exercises.\nYou will use this RStudio project for all exercises  so that there is no ambiguity about where your files are saved. Finally, you will create directories within your new project directory so that you have an organized directory structure for storing your files. Systems paths for project files and directories will be manage using the {here} library. This process will also ensure that each student’s computer is configured in the same manner.\nReading through these steps, however, will facilitate your ability to apply the concepts and run the associated functions. Thus, all RAs will gain some basic experience with Git commands and with communicating with a remote repository. RAs will be collaborators of a repository for certain projects.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#libraries-used",
    "href": "modules/project_management/using_git_and_github.html#libraries-used",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "Libraries Used",
    "text": "Libraries Used\n\n{usethis}: 2.2.3: for project workflow automation\n{gitcreds}: 0.1.2: for querying git credentials\n{gh}: 1.4.1: for querying the github api\n{gert}: 2.0.1: optional R library approach for git commands\n\n\n\nWarning\nDo not try to cheat the system and jump ahead. If you do, just like playing the Monopoly board game, your chance card may read “Go to jail. Go directly to jail. Do not pass go. Do not collect $200.” In other words, you cannot complete these steps without ensuring that your credentials are set. You will run into errors and try to contact me. If the following code does not return information for your login, your github account, scopes, and a token, you will be unable to proceed. If it does but your token is expired, you cannot proceed. Ensure you have set your credentials.\ngh::gh_whoami()\n\n\nTo Do: Steps of the Task\nFollowing the sections below, you will:\n\nCreate a Version-Control Project with RStudio\n\n\nName it cdvlab-exercises (for exercises and practice)\n\n\nMake file edits, stage those edits, and commit them\nPush commits to GitHub\n\nIn workshops or for data projects, we will use RStudio along with some simple Git commands for adding, committing, and pushing files.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#creating-a-local-directory-for-all-data-projects",
    "href": "modules/project_management/using_git_and_github.html#creating-a-local-directory-for-all-data-projects",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "Creating a Local Directory for all Data Projects",
    "text": "Creating a Local Directory for all Data Projects\nI recommend creating a folder (aka directory) on your computer for managing all or your data-related activities. Such a directory makes finding your projects easy. Name it \"data\" (yes, all lowercase). I recommend creating the directory someplace where you might not accidentally delete it. Create only one so as not to confuse yourself.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#connecting-the-repository-to-an-rstudio-project",
    "href": "modules/project_management/using_git_and_github.html#connecting-the-repository-to-an-rstudio-project",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "Connecting the Repository to an RStudio Project",
    "text": "Connecting the Repository to an RStudio Project\nYou should already have a repository on GitHub named “cdvlab-exercises” which you created from this template repository. You will now create an RStudio project and connect it to that remote repository on your GitHub account.\nWhen you create the project inside your class directory, your directory structure will look like this:\n└── data\n│   └── cdvlab-exercises \n\nIn RStudio, File &gt; New Project &gt; Version Control &gt; Git.\nIn the pop-up, you will see a request for the “repository URL”. Paste the URL of the GitHub repository. This URL will be the same as what you see on your GitHub account. However, we need to add .git to the end of it.\n\n    https://github.com/&lt;your_github_username&gt;/cdvlab-exercises.git\n\nWhen you create the project, a directory will be created as a sub-directory of your main /data directory. Thus, you will see /data/cdvlab-exercises.\n\nWARNING: Do not create the project inside of an existing project’s directory.\nNote: I recommend that you also select “Open in new session” in order to compartmentalize projects. When you work on the team project, open the project. When you work on your homework or other class exercises, open your homework project.\n\nClick “Create Project” to create the new project directory, which will create:\n\na project directory on your computer\na project file with file extension .Rproj\na Git repository or link to the remote GitHub repository for the project (also an RStudio Project)\n\n\nIf the repository already exists on GitHub (and it does in this instance) you should see RStudio flash a connection to GitHub and likely pull the repo contents down to your newly-created project directory. In this case, however, your local Git repository on RStudio will contain few files.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#understanding-the-directory-structure",
    "href": "modules/project_management/using_git_and_github.html#understanding-the-directory-structure",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "Understanding the Directory Structure",
    "text": "Understanding the Directory Structure\nDirectory structures are used for organization. Each directory and sub directory has a purpose, which is to contain files of a certain type. As long as you know what the goal of the file is, you know where to save it. When working with teams, this common language avoids many problems.\nAlthough there are different ways to create project directory structures and different ways to name those directories, we will use the following structure. Not all directories will be used for all types of projects.\nInside your /data/cdvlab-exercises directory your full project directory structure should look like the one below.\n└── data/\n│   └── interim/ \n│   ├── processed/\n│   └── raw/\n├── cdvlab-exercises.Rproj (the R project file)\n├── docs/\n├── .gitignore              (a version-control gitignore file)\n├── README.md               (a read me file)\n├── refs/\n├── requirements.R\n├── requirements.txt\n└── reports/\n│   ├── figs/\n│   └── images/\n└── src/\n│   ├── data/\n│   ├── figs/\n│   ├── functions/\n│   └── utils/\n\nDirectory and Sub-Directory Purpose\nThe purpose of each directory and sub-directory is explained following the structure.\n\ndata/: for raw/virgin data files and modified data files\ndocs/: for document files like the project description, any dictionary of variable names, etc.\nrefs/: for references, papers, reading materials, and other document\nreport/: for R Markdown (e.g., .Rmd) report files and their output file types (e.g., .docx, .pdf, .html)\nsrc/: for all source code related files (e.g., .R scripts, functions, .py files, etc.). General scripts can be saved in the top level src/ but most of your script files will be saved in src/figs/ because you will create figures\n\nMore directory descriptions are provided below.\nData Files\nInside data/, add the following sub-directories:\n\nraw/, for data/raw/: containing raw data files obtained from sources (e.g., .csv, .tsv, .xlxs)\ninterim/, for data/interim/: .Rds (highly recommended) files containing intermediate transformed data; cleaned, merged, etc. but not processed fully to be in final form\nprocessed/, for data/processed/; .Rds (highly recommended) files containing finalized data (e.g., aggregated, summaries, and data frames ready for plotting\n\nNOTE: For the lab, you will see me write data as .Rds files using the saveRDS() function because this file format will preserve variable formatting and reduce redoing work later. There are other ways of handling this with {dplyr} functions but I find saveRDS() is the most straightforward.\nWARNING: If you process and save those data files as .csv, .xlsx, or similar, you will likely find yourself working harder by recoding solutions you have already performed. I do not recommend this except for final versions that no longer require processing.\nSource/Code Files\nInside src/, add the following sub-directories:\n\ndata, for src/data/: containing .R scripts needed to download or generate data\nfigs/, for src/figs/: containing .R scripts needed to create visualizations\nfunctions/, for src/functions/: containing all .R functions needed that do not belong to libraries\n\nFiles for Reports\nInside report/, add the following sub-directories:\n\nfigs/ for report/figs/: containing visualization files (e.g., .png) for the report\nimages/ for report/images/: containing image files (e.g., .png) for the report\n\nWhen testing your plots, you may wish to add notes or other written content that you can use in conjunction with your plots. In such cases, I recommend creating R Markdown files with meaningful names for taking notes. You can save these reports in the top-level of /report and then source your .R figure script\nBelow are examples of an .R script for creating your visualizations and an .Rmd file that reads the .R script and renders the .png file within it. These files are also located under the Example Files & Other course tab. Your team report will utilize this same structure, though details and files will be also located under the Project course tab.\n\nexample-rmarkdown-file-with-fig-script.Rmd\nexample-figure-script.R\n\nMoving forward, save all data to their relevant sub-directories within /data; create all .R code files and scripts in files in /src, including scripts use to create your visualizations and .png plot files; create all exercise or homework R Markdown files (e.g., .Rmd) in /report. Finally, any readings or references can can saved in /refs and any other document files can be saved in /docs. Reserve /report/figs for writing/saving plots or figures. All paths to directories and files for reading and writing files will be managed using the {here} library.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#summary",
    "href": "modules/project_management/using_git_and_github.html#summary",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "Summary",
    "text": "Summary\nYou now understand how to create projects in R, how to connect projects to remote GitHub repositories, and how to use directories intentionally.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules/project_management/using_git_and_github.html#other-resources",
    "href": "modules/project_management/using_git_and_github.html#other-resources",
    "title": "Project Management 02: R Projects, Git, and GitHub",
    "section": "Other Resources",
    "text": "Other Resources\n\nGit Client:\n\nGit clients work like the RStudio Gui option described above but likely much better. One client is GitKraken. * If you find the Terminal command line daunting or limiting, I might recommend a Git Client to use as I am not a big fan of the RStudio interface. * GitKraken is a good option and they have lots of tutorials on their website. GitKraken is seamless to set up. Install, connect your GitHub account, select your repo to add, and voilà. You can stage, commit, and push from there.\n\nhappygitwithr",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "<b>Project Management</b>",
      "**Project Management 02**: R Projects, Git, and GitHub"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html",
    "href": "modules_setup/installing_r_and_rstudio.html",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "We use the R programming language and the RStudio IDE for manipulating data and creating data visualizations.\n\n\nThe first step for this course is to install and configure some software. If you have these installed on your computer, you will need to ensure you have the correct versions of software and libraries installed.\n\nDownload and Install R\nDownload and Install RStudio\nConfigure RStudio\nInstall R libraries/packages needed",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html#tasks",
    "href": "modules_setup/installing_r_and_rstudio.html#tasks",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "The first step for this course is to install and configure some software. If you have these installed on your computer, you will need to ensure you have the correct versions of software and libraries installed.\n\nDownload and Install R\nDownload and Install RStudio\nConfigure RStudio\nInstall R libraries/packages needed",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html#determining-the-version-of-your-computers-operating-system",
    "href": "modules_setup/installing_r_and_rstudio.html#determining-the-version-of-your-computers-operating-system",
    "title": "Installing R and RStudio",
    "section": "Determining the version of your computer’s operating system",
    "text": "Determining the version of your computer’s operating system\nYour version of operating system will dictate which version of R to download and install. Make note of your computer’s operating system.\nWindows systems are easier and Windows 10 and 11 operating systems will both use the same R versions.\nMacs are somewhat more complicated. The version depends on your cpu. Visit this link to determine.\nThere will be two cpu options, Intel 64-bit for macOS 10.13 or Apple silicon arm64 for macOS 11 and higher.\nCloud Options:\nIf you do not have a laptop (let me know) or do not have 5GB of hard drive space available on your computer, you might consider a cloud version of the software. One is maintained by Posit (formerly RStudio) and the other is maintained by CMC.\n\nPosit (25 free compute hours a month – make time out)\nRemote Desktop Protocol (No limit on compute hours) (contact me if interested). This is managed by CMC but may not be reliable.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html#downloading-r",
    "href": "modules_setup/installing_r_and_rstudio.html#downloading-r",
    "title": "Installing R and RStudio",
    "section": "Downloading R",
    "text": "Downloading R\nOnce you know your processor, navigate to https://cran.r-project.org/ and in the “Download and Install R” section, select your operating system. You can also select from below and follow the indented sections that follow.\n\nDownload R for Linux (Debian, Fedora/Redhat, Ubuntu)\nDownload R for macOS\nDownload R for Windows\n\nWindows users should select the base version of R and download version 4.4.1 (no other version) to your computer. If this version is not on the main page, go to the “Other Builds” section and select “previous releases” and download the correct version.\nMac users should download either R-4.4.1.pkg or R-4.4.1x86_64.pkg version depending on the cpu noted earlier. Do not download any version other than 4.4.1 and please do not update throughout the semester.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html#downloading-rstudio",
    "href": "modules_setup/installing_r_and_rstudio.html#downloading-rstudio",
    "title": "Installing R and RStudio",
    "section": "Downloading RStudio",
    "text": "Downloading RStudio\nUse the urls below to download RStudio and save it to the same directory location on your computer as you saved R.\nWindows 10/11: https://download1.rstudio.org/electron/windows/RStudio-2024.12.1-563.exe\nMacOS 12+: https://download1.rstudio.org/electron/macos/RStudio-2024.12.1-563.dmg\nMacOS 10.15-11: https://s3.amazonaws.com/rstudio-ide-build/electron/macos/RStudio-2023.09.1-494.dmg\nLinux: go to https://posit.co/download/rstudio-desktop/\nNote: If you have a 32bit operating system, you will need to install an older version: https://www.rstudio.com/products/rstudio/older-versions/",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html#installing-r-then-install-rstudio",
    "href": "modules_setup/installing_r_and_rstudio.html#installing-r-then-install-rstudio",
    "title": "Installing R and RStudio",
    "section": "Installing R (then install RStudio)",
    "text": "Installing R (then install RStudio)\nInstalling should be easy and you can accept all of the defaults although the desktop icons are not needed, especially for R because you will never need it; RStudio will find R for you. You can follow these videos for simple installing.\nPC: How to Install R and R Studio on Windows 10/11\nMac: Installing R and RStudio on a Mac\nNote: If you leave the desktop icon for R, you can remove that later. You will never need it because RStudio will find R for you.",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules_setup/installing_r_and_rstudio.html#additional-step-for-mac-users",
    "href": "modules_setup/installing_r_and_rstudio.html#additional-step-for-mac-users",
    "title": "Installing R and RStudio",
    "section": "Additional Step for Mac Users:",
    "text": "Additional Step for Mac Users:\nDownload and Install XQuartz\nSome functions in R require an “X11 Server” and/or libraries associated with an X11 server. Apple does not provide this software with OS X anymore so unfortunately you have to do it on your own via a third-party application called XQuartz for OS X 10.9 or later.\nUse the url below to download the XQuartz file and save it to your computer. Follow the same install instructions as above for installing the XQuartz file.\nFor macOS 10.9 or later, download this XQuartz file and save it to your computer and install: https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.5/XQuartz-2.8.5.pkg",
    "crumbs": [
      "**Modules**",
      "<b>Installation & Setup</b>",
      "**Installing R and RStudio**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html",
    "href": "modules/functions_and_scripts.html",
    "title": "Functions, Arguments, and R scripts",
    "section": "",
    "text": "A good friend of mine was once tried using R to summarize data. He couldn’t figure out why he could not use a function called mean() to calculate the mean of variables in his data set. Yes, mean() does compute a mean but he did not understand the object for which he was trying to compute a mean. When I explained the issue to him, he told me that he would often try to ‘brute force’ his way into obtaining results. He did not understand how the function worked and was not very concerned with learning. Without knowing how functions work, you limit yourself to troubleshoot answers and you spend a lot of time troubleshooting errors. You cannot just brute force yourself into data science or running models without getting yourself into trouble.\nAlthough the R language differs from other languages like Python, JavaScript, or HTML, the concepts covered is this section may be redundant for student who have taken a computer-science class. For beginners, the concepts may initially be challenging or confusing. You may even question why we cannot just jump into data manipulation and why all of this matters. In order to code in R so that you can be comfortable using it and with communicating with other users, a very basic understanding of programming concepts is important. This way, when someone asks you about an object, function, or assignment, you will know what they are taking about. And, well, you cannot communicate with R without knowing how functions work at a basic level.\n\n\n\n\nR Workflow Basics\nHuber: Functions\n\n\n\nRead through the module. You can use the R console or open up an R Markdown (e.g., .Rmd) file to follow along interactively. If you instead prefer to simply read through the content so that you can understand the concepts without coding, that is fine too. Concepts will be applied in class in order to complete activities, however. Reading the module will provide you with confidence working on those activities and prevent you from feeling lost while completing activities. Testing out some code may provide you more confidence.\n\n\n\n\n\n{here} 1.0.1: for file path management\n\n\n\n\nview_html(): for viewing data frames in html format\nYou can access remotely using this code, though you do not need to do so now.\nsource(https://raw.githubusercontent.com/slicesofdata/dataviz24/main/modules/src/functions/view_html.R)",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#supplementary-readings",
    "href": "modules/functions_and_scripts.html#supplementary-readings",
    "title": "Functions, Arguments, and R scripts",
    "section": "",
    "text": "R Workflow Basics\nHuber: Functions\n\n\n\nRead through the module. You can use the R console or open up an R Markdown (e.g., .Rmd) file to follow along interactively. If you instead prefer to simply read through the content so that you can understand the concepts without coding, that is fine too. Concepts will be applied in class in order to complete activities, however. Reading the module will provide you with confidence working on those activities and prevent you from feeling lost while completing activities. Testing out some code may provide you more confidence.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#libraries",
    "href": "modules/functions_and_scripts.html#libraries",
    "title": "Functions, Arguments, and R scripts",
    "section": "",
    "text": "{here} 1.0.1: for file path management",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#external-functions",
    "href": "modules/functions_and_scripts.html#external-functions",
    "title": "Functions, Arguments, and R scripts",
    "section": "",
    "text": "view_html(): for viewing data frames in html format\nYou can access remotely using this code, though you do not need to do so now.\nsource(https://raw.githubusercontent.com/slicesofdata/dataviz24/main/modules/src/functions/view_html.R)",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#examples-of-objects",
    "href": "modules/functions_and_scripts.html#examples-of-objects",
    "title": "Functions, Arguments, and R scripts",
    "section": "Examples of objects",
    "text": "Examples of objects\nYou can also think of an object as a sort of container that holds something. Containers of different types hold different things and so is true in computer programming. A container for holding water may look different from a container for holding books. In computer speak, one type of container can hold numbers, another can hold characters, another can hold a data frame, etc. The container object is holding whatever you have assigned it to hold.\nWe will deal with different types of objects in data science. Without providing too complicated or technical of descriptions, some are described below.\n\nnumeric objects: representing numeric information (e.g., one’s age)\ncharacter objects: representing character information (e.g., one’s name or race)\nvector objects: representing more than one numeric object (e.g., ages of participants)\ndata frame objects: containing vectors of data (e.g., column variables and row instances of data)\nfunction objects: that accept one object and return an other object (e.g., the mean of numeric vector)\n\nThere are other type of objects that you will learn about and encounter but for now, those are the most relevant.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#a-character-example",
    "href": "modules/functions_and_scripts.html#a-character-example",
    "title": "Functions, Arguments, and R scripts",
    "section": "A character example",
    "text": "A character example\nLet’s start with an example of an object called name, which we would like to assign a set of characters, like Jim Bob.\nIn order to create such an object, we would need to place the characters within quotation marks (e.g., single or double, does not matter). The quotes let R know the contents of name are characters (aka strings).\n\"Jim Bob\"\nWhen dealing with data, you will encounter many character objects as they often represent factor variables (e.g., race, ethnicity, favorite game, etc.) but you will also see lots of objects that are numeric in some form (e.g., age, rating, cognitive performance, etc.).",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#assignment-provides-meaning-or-definition",
    "href": "modules/functions_and_scripts.html#assignment-provides-meaning-or-definition",
    "title": "Functions, Arguments, and R scripts",
    "section": "Assignment provides meaning or definition",
    "text": "Assignment provides meaning or definition\nAssignment is akin to creating a new word and assigning a meaning to it. You could also think of an assignment statement as a way to tell R to “create this thing and set it equal to something” so that the computer understand what association represents.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#a-character-object-a-silly-example",
    "href": "modules/functions_and_scripts.html#a-character-object-a-silly-example",
    "title": "Functions, Arguments, and R scripts",
    "section": "A character object: A silly example",
    "text": "A character object: A silly example\nIf objects are like containers holding things, we can use name of the object (e.g., container) and then assign \"things\" to it using &lt;-. In order to create a character object, we would need to place the characters within quotation marks (e.g., single or double, does not matter). The quotes let R know the contents of container are characters (aka strings).\n\"things\"\nWhen dealing with data, you will encounter many character objects as they often represent factor variables (e.g., race, ethnicity, favorite game, etc.) but you will also see lots of objects that are numeric in some form (e.g., age, rating, cognitive performance, etc.).\nSilly Example:\n\n\"something\" assigned to container\ncontainer &lt;- \"something\"\n\n\ncontainer &lt;- \"things\"\n\nAnd to see its contents, use print() to return the objects content:\n\nprint(container)\n\n[1] \"things\"\n\n\nOr just type the name of the object and you will see the returned object is \"things\".\n\ncontainer\n\n[1] \"things\"\n\n\nFor another example, we could also create an object called name, which we could assign a set of characters, like Jim Bob, making the object a character object.\n\nname &lt;- \"Jim Bob\"\n\nTo see what is returned:\n\nname\n\n[1] \"Jim Bob\"\n\n\nWhether you name is or is not Jim Bob, you can see that name contains the characters that represent the name of someone named “Jim Bob”. Although we assigned \"Jim Bob\" to name, we could have assigned it a given name. The assignment process simply stores the assigned information as an object using of whatever name you decided to call it (e.g., name, Name, NAME, xyz, etc.). We will discuss more on these letter casing differences later.\nYou could also assign the character to the object this way.\n\n\"things\" -&gt; container\n\nHowever, we won’t use much of this approach for different reasons. One reason is that doing so does not follow the R Style Guide. The style guide defines a set of guidelines for coding in R. Rather than memorize all of the styling, pay careful attention to the way code appears in the examples provided and try your best to model your code after the examples. For example, don’t do something this container&lt;-\"things\" just so you save space as doing so makes the code more difficult for you and others to read and understand.\nOK, back to Jim Bob. Of course, there are different people other than Jim Bob who exist in the world but when coding, they do not exist unless you create them. So, let’s create an object that holds the name of \"Jim Bob\".\nname &lt;- \"Jim Bob\"\n\nname &lt;- \"Jim Bob\"     # assign string to object named name\n\n\nName &lt;- \"Jim Bob\"     # we could have assigned it a different name, say Name\n\n\nNAME &lt;- \"Jim Bob\"     # or assigned it in all caps\n\nWhenever you reference the object name (or Name), R will return the contents of the object to you, which in this case will be a character or string object containing a single person’s name because that’s how we assigned it.\n\nname               # call object to return contents of \"name\"\n\n[1] \"Jim Bob\"\n\n\nAnd again, we can use print() to do the same thing:\n\nprint(name)\n\n[1] \"Jim Bob\"\n\n\n\nBeing mindful of case sensitivity\nA word of warning is needed here. Although name, Name, and NAME all contain the same four characters, n a m and e all arranged it he same order, the objects are all different. They just happen to hold the same content. The reason for there being three different object is because R is a case-sensitive language, which means that the letter case matters. In some programming languages, the case is ignored.\nTo illustrate, consider an example for which you assign different names to the object.\nname &lt;- \"Jim Bob\"     # create the object\n\n\nName &lt;- \"Bob\"         # then change it\n\n\nNAME &lt;- \"Jim\"         # then change it again\nIn those languages, if you asked what the name object contained, the program would return \"Jim\" because these characters were assigned last, even though they were assigned to an uppercase version, NAME. With R, you will need to be mindful of the letter case. This is by design, perhaps an advantage rather than a disadvantage.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#a-numeric-object",
    "href": "modules/functions_and_scripts.html#a-numeric-object",
    "title": "Functions, Arguments, and R scripts",
    "section": "A numeric object",
    "text": "A numeric object\nWhat about numeric information? We can create an object called year and assign the current year to it; let’s have this object contain the current year in numeric form, not as a string. Remember to use &lt;- for assignment.\n\nyear &lt;- 2024    # assign a number to year ; notice no quotes\n\nIn order to know whether this year object now contains the year, we can check by typing the name of the object or use print() to print the returned value.\n\nyear\n\n[1] 2024\n\nprint(year)\n\n[1] 2024",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#inspecting-vectors-with-some-functions",
    "href": "modules/functions_and_scripts.html#inspecting-vectors-with-some-functions",
    "title": "Functions, Arguments, and R scripts",
    "section": "Inspecting vectors with some functions",
    "text": "Inspecting vectors with some functions\nname and year are very simple objects. name is a simple character/string object we created, which contains only the name of 1 person and year only holds the current year. There is something else important about how R treats them that you cannot see on the surface. Both of these objects are also vectors. Vectors are one-dimensional arrays containing n pieces of information. You might also think of a vector so a variable (e.g., IQs of people). Both the name and year vectors contain only one piece of information, however. If you don’t believe me, we can use some functions that will answer this for us.\n\nis.vector() is a function that returns a logical (T or F) about whether the object is a vector\nlength() is a function that returns a non-negative numeric integer representing the number of elements contained\ntypeof() is a function that returns the object’s type\n\nLet’s try them by passing the object name inside the function.\n\nis.vector(name)   # is it a vector?\n\n[1] TRUE\n\n#?length\nlength(name)      # how many elements?\n\n[1] 1\n\ntypeof(name)      # what is it's type?\n\n[1] \"character\"\n\n\nIf name contained more than one object, it would still be a vector having a different length. But in order to create such vectors, each element of the vector needs to be separated by a comma and each elements needs to be wrapped by quotes.\nIf you do not separate strings by a comma…\n\nname &lt;- \"Jim Bob Kendra\"\n\n\nname                                # return object; also print(name)\n\n[1] \"Jim Bob Kendra\"\n\nis.character(name)                  # is it a character?\n\n[1] TRUE\n\nlength(name)                        # what is its length?\n\n[1] 1\n\n\nIf you do use quotes for each element and separate each by a comma, you need to use a function to combine them, which is c().\n\nname &lt;- c(\"Jim Bob\", \"Kendra\")  # two names, combine with c()\n\n\n\nis.character(name)        \n\n[1] TRUE\n\nlength(name)                   # vector with length 2\n\n[1] 2\n\n\nThe more you work with character vector, the more you way want to avoid some annoyances of creating them.\nThe {Hmisc} library has a function called Cs() that obviates the inclusion of the quotes.\n\nHmisc::Cs(Jim, Kendra, Bill, Sandy)\n\n[1] \"Jim\"    \"Kendra\" \"Bill\"   \"Sandy\" \n\n\nBeware of vectors containing elements with space like this:\nHmisc::Cs(Jim Bob, Kendra)\nR will throw an error to inform you that something is wrong. For example: Error: unexpected symbol in \"Hmisc::Cs(Jim Bob\".",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#elements-of-vectors",
    "href": "modules/functions_and_scripts.html#elements-of-vectors",
    "title": "Functions, Arguments, and R scripts",
    "section": "Elements of vectors",
    "text": "Elements of vectors\nAs a side note, the pieces/values of a vector are referred to as elements. You can reference elements by number representing their position in the vector.\n\nname[1]   # first element\n\n[1] \"Jim Bob\"\n\nname[2]   # second element\n\n[1] \"Kendra\"\n\nname[3]   # a third element? No. It only has length 2\n\n[1] NA\n\n\nObjects in R, however, can take on many forms other than strings or numbers just illustrated. Objects can be strings/characters, numeric values, character strings, functions, data frames, vectors, lists, matrices, plots, etc. If you use typeof() on a data frame object, the function will return \"list\" because a data frame is also a list. More on this later.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#creating-a-.r-script-file-to-source",
    "href": "modules/functions_and_scripts.html#creating-a-.r-script-file-to-source",
    "title": "Functions, Arguments, and R scripts",
    "section": "Creating a .R script file to source()",
    "text": "Creating a .R script file to source()\nThere are a few ways to create files for your R project. You can do so easily from RStudio or you can do so more quickly using Git.\n\nCreating a .R script using RStudio\nYou can easily create an .R script file from RStudio. You are most likely familiar with this file creation process.\nFirst, go to File &gt; New File &gt; R Script\nSecond, File &gt; Save As, browse to the projects /r directory, name it my_first_script.R and click save.\nIn it, type message(\"My first script file.\") and save it as my_first_script (the .R should be automatic) in your \"/src\" directory.\nYour file will be written to the /src directory and will be opened in RStudio.\nBecause the .Rmd file you are working with is already saved in \"/src\" (if you saved it there correctly), you can source the file by name.\n\n\nCreating a .R script file using the Terminal\nFirst, go to your Terminal in RStudio. This is located by the Console tab and is the same place you type your Git commands.\nSecond, you can use the touch function to create the file. You will want to specify the directory to write the file and the name of the file to write.\nThird, to create a file named my_first_script.R, type:\ntouch src/my_first_script.R and your file will be written to the r/ directory.\nTo open the file in RStudio, the easiest way to go to the Files pane in RStudio, locate it and click it so that it appears as an open tab.\nIf you want to add it to Git, type:\ngit add src/my_first_script.R and it will be staged.\nIf you misspelled the file name and want to delete it, or just need to delete it for some reason, you can type:\nrm src/my_first_script.R\nTo delete it and remove from Git, type:\ngit rm src/my_first_script.R",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#adding-code-to-the-script-file",
    "href": "modules/functions_and_scripts.html#adding-code-to-the-script-file",
    "title": "Functions, Arguments, and R scripts",
    "section": "Adding code to the script file",
    "text": "Adding code to the script file\nWe will now add code to the file. To demonstrate how this works, let’s just add a message to the file using message() which is a simple stand-in for a bunch of lines of code.\nIn the script file, type:\nmessage(\"My first script file.\")\nNote: Make sure you save the file.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#sourcing-the-script-file",
    "href": "modules/functions_and_scripts.html#sourcing-the-script-file",
    "title": "Functions, Arguments, and R scripts",
    "section": "Sourcing the script file`",
    "text": "Sourcing the script file`\nNow, to run the code saved in my_first_script.R, we will source() the file by specifying the path to it using {here}.\nsource(file = here::here(\"src\", \"my_first_script.R\"))\nBut you can omit using file because you are only passing one argument and it’s file.\n\nsource(here::here(\"src\", \"my_first_script.R\"))\n\nMy first script file.",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#sourcing-multiple-script-files",
    "href": "modules/functions_and_scripts.html#sourcing-multiple-script-files",
    "title": "Functions, Arguments, and R scripts",
    "section": "Sourcing multiple script files",
    "text": "Sourcing multiple script files\nWhen you have multiple files to source(), you can source them individually, making sure that they are ordered in the order you wish to run them. They will execute line by line.\nsource(here::here(\"src\", \"read_data.R\"))\nsource(here::here(\"src\", \"clean_data.R\"))\nsource(here::here(\"src\", \"create_plots.R\"))\nYou can also create a new .R script file that contains the above three lines of source code and add them to another file, named appropriately like read_clean_plot_data.R. and then source that file like this:\nsource(here::here(\"src\", \"read_clean_plot_data.R\"))",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#sourcing-all-files-in-a-directory",
    "href": "modules/functions_and_scripts.html#sourcing-all-files-in-a-directory",
    "title": "Functions, Arguments, and R scripts",
    "section": "Sourcing all files in a directory",
    "text": "Sourcing all files in a directory\nIf all those files to source are in a directory, you can use a special source function from {R.utils} R.utils::sourceDirectory(). For example, if you have all of personal or project-related functions nicely organized in a directory like src/funcions/, you can easily source it like this. The benefit here is that you don’t have to specify all of the files individually.\n\nR.utils::sourceDirectory(here::here(\"src\", \"functions\"))",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#an-alternative-to-view",
    "href": "modules/functions_and_scripts.html#an-alternative-to-view",
    "title": "Functions, Arguments, and R scripts",
    "section": "An alternative to View()",
    "text": "An alternative to View()\nAs an alternative to View(), a function that I wrote using the {DT} library to display the data in an HTML table that allows you to sort the data.\n\nview_html() (lowercase v): returns an filterable html table of the data frame; my alternative to View()\n\nIf you want to use this function, you can source() the raw code from the course site using the code below. Because I use this function often, you might wish to add it to your /src/functions/ directory and simply source all of the files in that directory as describe above.\nsource(https://raw.githubusercontent.com/slicesofdata/dataviz24/main/modules/src/functions/view_html.R)",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#getting-the-head-of-a-data-frame",
    "href": "modules/functions_and_scripts.html#getting-the-head-of-a-data-frame",
    "title": "Functions, Arguments, and R scripts",
    "section": "Getting the head() of a data frame`",
    "text": "Getting the head() of a data frame`\nIf you query the function in the console by typing using ?head or help(head), you will see in there are two main parameters.\nParameters/Arguments:\n\nx: a vector or data frame object\nn: a value of the indices to be selected (e.g., elements of vector, rows in data frame)\n\nhead() needs an object x in order to do anything. We can pass the USArrests data frame as the argument and if all goes well, we will only see the top or head of this data frame.\n\nhead(x = USArrests)   # 6 rows by default\n\n           Murder Assault UrbanPop Rape\nAlabama      13.2     236       58 21.2\nAlaska       10.0     263       48 44.5\nArizona       8.1     294       80 31.0\nArkansas      8.8     190       50 19.5\nCalifornia    9.0     276       91 40.6\nColorado      7.9     204       78 38.7\n\n\nAnd if you pass arguments to parameters in function according to their order (e.g., position), you do not need to reference the parameters by name when passing arguments. For example, we can remove the reference to x.\n\nhead(USArrests)   # 6 rows by default\n\n           Murder Assault UrbanPop Rape\nAlabama      13.2     236       58 21.2\nAlaska       10.0     263       48 44.5\nArizona       8.1     294       80 31.0\nArkansas      8.8     190       50 19.5\nCalifornia    9.0     276       91 40.6\nColorado      7.9     204       78 38.7\n\n\nThe second parameter for head() is n, the number of rows for the function to return. The default number was 6. We can change the default operation by passing 3 as the argument to it.\nBut as long as we pass the arguments to x and then to n, then we do not need to reference either by name. Instead, we can just pass the arguments.\nBut if you change order, you will need to reference the arguments. You cannot call head(3, USArrests) for example but you can call head(n = 3, x = USArrests). You normally would not wish to change the order of arguments for head() but for more complicated functions, you might wish to for different reasons.\nUsing the viewing options:\n\n#View(USArrests)                            # the standard viewer\n\n#view_html(USArrests, rows = T, show = 5)   # but same as \n\n#view_html(head(USArrests), rows = T)",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#checking-whether-an-object-is-a-data-frame-using-is.data.frame",
    "href": "modules/functions_and_scripts.html#checking-whether-an-object-is-a-data-frame-using-is.data.frame",
    "title": "Functions, Arguments, and R scripts",
    "section": "Checking whether an object is a data frame using is.data.frame()",
    "text": "Checking whether an object is a data frame using is.data.frame()\nYou can also check whether the USArrests data file is a data frame using is.data.frame(), which will return TRUE indicating that it is indeed a data frame.\n\nis.data.frame() returns logical ( T or F) about data frame as two-dimensional array",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#checking-the-structure-of-a-data-frame-using-str",
    "href": "modules/functions_and_scripts.html#checking-the-structure-of-a-data-frame-using-str",
    "title": "Functions, Arguments, and R scripts",
    "section": "Checking the structure of a data frame using str()",
    "text": "Checking the structure of a data frame using str()\nThat seems tedious, however. You can learn a lot more about the data frame by examining its structure using str(). The USArrests object is a data frame, contains 50 observations (e.g., rows) and 4 variables (columns). All column variables appear to contains numbers, with two of them being numeric, abbreviated num and two are integers, abbreviated int.\n\nstr() returns the structure of a data frame",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  },
  {
    "objectID": "modules/functions_and_scripts.html#using-other-functions",
    "href": "modules/functions_and_scripts.html#using-other-functions",
    "title": "Functions, Arguments, and R scripts",
    "section": "Using other functions`",
    "text": "Using other functions`\nAnd you can check the names of the columns using names(). What is actually returned to you is a character vector, or a vector whose elements are of character type. You can test whether the column names is a vector by wrapping names() with the is.vector() function. Similarly, wrapping names() in typeof() will tell you the type is character.\n\nnames(): returns names of data frame\nis.vector(): returns logical if/if not a vector (see other is. functions)\ntypeof(): returns the type of the object\n\n\nnames(USArrests)           # get the names of the columns?\n\n[1] \"Murder\"   \"Assault\"  \"UrbanPop\" \"Rape\"    \n\nis.vector(names(USArrests))\n\n[1] TRUE\n\ntypeof(names(USArrests))   # get the type of structure are the names\n\n[1] \"character\"",
    "crumbs": [
      "**Modules**",
      "<b>Modules</b>",
      "**Functions, Arguments, and R scripts**"
    ]
  }
]